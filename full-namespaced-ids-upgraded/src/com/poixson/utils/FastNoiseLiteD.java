package com.poixson.utils;

public class FastNoiseLiteD {
  public enum NoiseType {
    OpenSimplex2, OpenSimplex2S, Cellular, Perlin, ValueCubic, Value;
  }
  
  public enum RotationType3D {
    None, ImproveXYPlanes, ImproveXZPlanes;
  }
  
  public enum FractalType {
    None, FBm, Ridged, PingPong, DomainWarpProgressive, DomainWarpIndependent;
  }
  
  public enum CellularDistanceFunction {
    Euclidean, EuclideanSq, Manhattan, Hybrid;
  }
  
  public enum CellularReturnType {
    CellValue, Distance, Distance2, Distance2Add, Distance2Sub, Distance2Mul, Distance2Div;
  }
  
  public enum DomainWarpType {
    OpenSimplex2, OpenSimplex2Reduced, BasicGrid;
  }
  
  private enum TransformType3D {
    None, ImproveXYPlanes, ImproveXZPlanes, DefaultOpenSimplex2;
  }
  
  private int mSeed = 1337;
  
  private double mFrequency = 0.01D;
  
  private NoiseType mNoiseType = NoiseType.OpenSimplex2;
  
  private RotationType3D mRotationType3D = RotationType3D.ImproveXZPlanes;
  
  private TransformType3D mTransformType3D = TransformType3D.DefaultOpenSimplex2;
  
  private FractalType mFractalType = FractalType.None;
  
  private int mOctaves = 1;
  
  private double mLacunarity = 2.0D;
  
  private double mGain = 0.5D;
  
  private double mWeightedStrength = 0.0D;
  
  private double mPingPongStrength = 2.0D;
  
  private double mFractalBounding = 0.5714285714285714D;
  
  private CellularDistanceFunction mCellularDistanceFunction = CellularDistanceFunction.EuclideanSq;
  
  private CellularReturnType mCellularReturnType = CellularReturnType.Distance;
  
  private double mCellularJitterModifier = 1.0D;
  
  private DomainWarpType mDomainWarpType = DomainWarpType.OpenSimplex2;
  
  private TransformType3D mWarpTransformType3D = TransformType3D.DefaultOpenSimplex2;
  
  private double mDomainWarpAmp = 1.0D;
  
  public FastNoiseLiteD() {
    CalculateFractalBounding();
    UpdateTransformType3D();
    UpdateWarpTransformType3D();
  }
  
  public FastNoiseLiteD(int seed) {
    this();
    setSeed(seed);
  }
  
  public void setSeed(int seed) {
    this.mSeed = seed;
  }
  
  public void setFrequency(double frequency) {
    this.mFrequency = frequency;
  }
  
  public void setNoiseType(NoiseType noiseType) {
    this.mNoiseType = noiseType;
    UpdateTransformType3D();
  }
  
  public void setRotationType3D(RotationType3D rotationType3D) {
    this.mRotationType3D = rotationType3D;
    UpdateTransformType3D();
    UpdateWarpTransformType3D();
  }
  
  public void setFractalType(FractalType fractalType) {
    this.mFractalType = fractalType;
  }
  
  public void setFractalOctaves(int octaves) {
    this.mOctaves = octaves;
    CalculateFractalBounding();
  }
  
  public void setFractalLacunarity(double lacunarity) {
    this.mLacunarity = lacunarity;
  }
  
  public void setFractalGain(double gain) {
    this.mGain = gain;
    CalculateFractalBounding();
  }
  
  public void setFractalWeightedStrength(double weightedStrength) {
    this.mWeightedStrength = weightedStrength;
  }
  
  public void setFractalPingPongStrength(double pingPongStrength) {
    this.mPingPongStrength = pingPongStrength;
  }
  
  public void setCellularDistanceFunction(CellularDistanceFunction cellularDistanceFunction) {
    this.mCellularDistanceFunction = cellularDistanceFunction;
  }
  
  public void setCellularReturnType(CellularReturnType cellularReturnType) {
    this.mCellularReturnType = cellularReturnType;
  }
  
  public void setCellularJitter(double cellularJitter) {
    this.mCellularJitterModifier = cellularJitter;
  }
  
  public void setDomainWarpType(DomainWarpType domainWarpType) {
    this.mDomainWarpType = domainWarpType;
    UpdateWarpTransformType3D();
  }
  
  public void setDomainWarpAmp(double domainWarpAmp) {
    this.mDomainWarpAmp = domainWarpAmp;
  }
  
  public double getNoiseRot(double x, double y, double angle) {
    return getNoise(
        MathUtils.RotateX(x, y, angle), 
        MathUtils.RotateY(x, y, angle));
  }
  
  public double getNoise(double x, double y) {
    double SQRT3, F2, t;
    x *= this.mFrequency;
    y *= this.mFrequency;
    switch (this.mNoiseType) {
      case CellValue:
      case Distance:
        SQRT3 = 1.7320508075688772D;
        F2 = 0.3660254037844386D;
        t = (x + y) * 0.3660254037844386D;
        x += t;
        y += t;
        break;
    } 
    switch (this.mFractalType) {
      case CellValue:
        return GenFractalFBm(x, y);
      case Distance:
        return GenFractalRidged(x, y);
      case Distance2:
        return GenFractalPingPong(x, y);
    } 
    return GenNoiseSingle(this.mSeed, x, y);
  }
  
  public double getNoise(double x, double y, double z) {
    double xy, xz, R3, s2, r;
    x *= this.mFrequency;
    y *= this.mFrequency;
    z *= this.mFrequency;
    switch (this.mTransformType3D) {
      case CellValue:
        xy = x + y;
        s2 = xy * -0.211324865405187D;
        z *= 0.577350269189626D;
        x += s2 - z;
        y = y + s2 - z;
        z += xy * 0.577350269189626D;
        break;
      case Distance:
        xz = x + z;
        s2 = xz * -0.211324865405187D;
        y *= 0.577350269189626D;
        x += s2 - y;
        z += s2 - y;
        y += xz * 0.577350269189626D;
        break;
      case Distance2:
        R3 = 0.6666666666666666D;
        r = (x + y + z) * 0.6666666666666666D;
        x = r - x;
        y = r - y;
        z = r - z;
        break;
    } 
    switch (this.mFractalType) {
      default:
        return GenNoiseSingle(this.mSeed, x, y, z);
      case CellValue:
        return GenFractalFBm(x, y, z);
      case Distance:
        return GenFractalRidged(x, y, z);
      case Distance2:
        break;
    } 
    return GenFractalPingPong(x, y, z);
  }
  
  public void domainWarp(Vector2 coord) {
    switch (this.mFractalType) {
      case Distance2Add:
        DomainWarpFractalProgressive(coord);
        return;
      case Distance2Sub:
        DomainWarpFractalIndependent(coord);
        return;
    } 
    DomainWarpSingle(coord);
  }
  
  public void domainWarp(Vector3 coord) {
    switch (this.mFractalType) {
      case Distance2Add:
        DomainWarpFractalProgressive(coord);
        return;
      case Distance2Sub:
        DomainWarpFractalIndependent(coord);
        return;
    } 
    DomainWarpSingle(coord);
  }
  
  private static final double[] Gradients2D = new double[] { 
      0.130526192220052D, 0.99144486137381D, 0.38268343236509D, 0.923879532511287D, 0.608761429008721D, 0.793353340291235D, 0.793353340291235D, 0.608761429008721D, 0.923879532511287D, 0.38268343236509D, 
      0.99144486137381D, 0.130526192220051D, 0.99144486137381D, -0.130526192220051D, 0.923879532511287D, -0.38268343236509D, 0.793353340291235D, -0.60876142900872D, 0.608761429008721D, -0.793353340291235D, 
      0.38268343236509D, -0.923879532511287D, 0.130526192220052D, -0.99144486137381D, -0.130526192220052D, -0.99144486137381D, -0.38268343236509D, -0.923879532511287D, -0.608761429008721D, -0.793353340291235D, 
      -0.793353340291235D, -0.608761429008721D, -0.923879532511287D, -0.38268343236509D, -0.99144486137381D, -0.130526192220052D, -0.99144486137381D, 0.130526192220051D, -0.923879532511287D, 0.38268343236509D, 
      -0.793353340291235D, 0.608761429008721D, -0.608761429008721D, 0.793353340291235D, -0.38268343236509D, 0.923879532511287D, -0.130526192220052D, 0.99144486137381D, 0.130526192220052D, 0.99144486137381D, 
      0.38268343236509D, 0.923879532511287D, 0.608761429008721D, 0.793353340291235D, 0.793353340291235D, 0.608761429008721D, 0.923879532511287D, 0.38268343236509D, 0.99144486137381D, 0.130526192220051D, 
      0.99144486137381D, -0.130526192220051D, 0.923879532511287D, -0.38268343236509D, 0.793353340291235D, -0.60876142900872D, 0.608761429008721D, -0.793353340291235D, 0.38268343236509D, -0.923879532511287D, 
      0.130526192220052D, -0.99144486137381D, -0.130526192220052D, -0.99144486137381D, -0.38268343236509D, -0.923879532511287D, -0.608761429008721D, -0.793353340291235D, -0.793353340291235D, -0.608761429008721D, 
      -0.923879532511287D, -0.38268343236509D, -0.99144486137381D, -0.130526192220052D, -0.99144486137381D, 0.130526192220051D, -0.923879532511287D, 0.38268343236509D, -0.793353340291235D, 0.608761429008721D, 
      -0.608761429008721D, 0.793353340291235D, -0.38268343236509D, 0.923879532511287D, -0.130526192220052D, 0.99144486137381D, 0.130526192220052D, 0.99144486137381D, 0.38268343236509D, 0.923879532511287D, 
      0.608761429008721D, 0.793353340291235D, 0.793353340291235D, 0.608761429008721D, 0.923879532511287D, 0.38268343236509D, 0.99144486137381D, 0.130526192220051D, 0.99144486137381D, -0.130526192220051D, 
      0.923879532511287D, -0.38268343236509D, 0.793353340291235D, -0.60876142900872D, 0.608761429008721D, -0.793353340291235D, 0.38268343236509D, -0.923879532511287D, 0.130526192220052D, -0.99144486137381D, 
      -0.130526192220052D, -0.99144486137381D, -0.38268343236509D, -0.923879532511287D, -0.608761429008721D, -0.793353340291235D, -0.793353340291235D, -0.608761429008721D, -0.923879532511287D, -0.38268343236509D, 
      -0.99144486137381D, -0.130526192220052D, -0.99144486137381D, 0.130526192220051D, -0.923879532511287D, 0.38268343236509D, -0.793353340291235D, 0.608761429008721D, -0.608761429008721D, 0.793353340291235D, 
      -0.38268343236509D, 0.923879532511287D, -0.130526192220052D, 0.99144486137381D, 0.130526192220052D, 0.99144486137381D, 0.38268343236509D, 0.923879532511287D, 0.608761429008721D, 0.793353340291235D, 
      0.793353340291235D, 0.608761429008721D, 0.923879532511287D, 0.38268343236509D, 0.99144486137381D, 0.130526192220051D, 0.99144486137381D, -0.130526192220051D, 0.923879532511287D, -0.38268343236509D, 
      0.793353340291235D, -0.60876142900872D, 0.608761429008721D, -0.793353340291235D, 0.38268343236509D, -0.923879532511287D, 0.130526192220052D, -0.99144486137381D, -0.130526192220052D, -0.99144486137381D, 
      -0.38268343236509D, -0.923879532511287D, -0.608761429008721D, -0.793353340291235D, -0.793353340291235D, -0.608761429008721D, -0.923879532511287D, -0.38268343236509D, -0.99144486137381D, -0.130526192220052D, 
      -0.99144486137381D, 0.130526192220051D, -0.923879532511287D, 0.38268343236509D, -0.793353340291235D, 0.608761429008721D, -0.608761429008721D, 0.793353340291235D, -0.38268343236509D, 0.923879532511287D, 
      -0.130526192220052D, 0.99144486137381D, 0.130526192220052D, 0.99144486137381D, 0.38268343236509D, 0.923879532511287D, 0.608761429008721D, 0.793353340291235D, 0.793353340291235D, 0.608761429008721D, 
      0.923879532511287D, 0.38268343236509D, 0.99144486137381D, 0.130526192220051D, 0.99144486137381D, -0.130526192220051D, 0.923879532511287D, -0.38268343236509D, 0.793353340291235D, -0.60876142900872D, 
      0.608761429008721D, -0.793353340291235D, 0.38268343236509D, -0.923879532511287D, 0.130526192220052D, -0.99144486137381D, -0.130526192220052D, -0.99144486137381D, -0.38268343236509D, -0.923879532511287D, 
      -0.608761429008721D, -0.793353340291235D, -0.793353340291235D, -0.608761429008721D, -0.923879532511287D, -0.38268343236509D, -0.99144486137381D, -0.130526192220052D, -0.99144486137381D, 0.130526192220051D, 
      -0.923879532511287D, 0.38268343236509D, -0.793353340291235D, 0.608761429008721D, -0.608761429008721D, 0.793353340291235D, -0.38268343236509D, 0.923879532511287D, -0.130526192220052D, 0.99144486137381D, 
      0.38268343236509D, 0.923879532511287D, 0.923879532511287D, 0.38268343236509D, 0.923879532511287D, -0.38268343236509D, 0.38268343236509D, -0.923879532511287D, -0.38268343236509D, -0.923879532511287D, 
      -0.923879532511287D, -0.38268343236509D, -0.923879532511287D, 0.38268343236509D, -0.38268343236509D, 0.923879532511287D };
  
  private static final double[] RandVecs2D = new double[] { 
      -0.2700222198D, -0.9628540911D, 0.3863092627D, -0.9223693152D, 0.04444859006D, -0.999011673D, -0.5992523158D, -0.8005602176D, -0.7819280288D, 0.6233687174D, 
      0.9464672271D, 0.3227999196D, -0.6514146797D, -0.7587218957D, 0.9378472289D, 0.347048376D, -0.8497875957D, -0.5271252623D, -0.879042592D, 0.4767432447D, 
      -0.892300288D, -0.4514423508D, -0.379844434D, -0.9250503802D, -0.9951650832D, 0.0982163789D, 0.7724397808D, -0.6350880136D, 0.7573283322D, -0.6530343002D, 
      -0.9928004525D, -0.119780055D, -0.0532665713D, 0.9985803285D, 0.9754253726D, -0.2203300762D, -0.7665018163D, 0.6422421394D, 0.991636706D, 0.1290606184D, 
      -0.994696838D, 0.1028503788D, -0.5379205513D, -0.84299554D, 0.5022815471D, -0.8647041387D, 0.4559821461D, -0.8899889226D, -0.8659131224D, -0.5001944266D, 
      0.0879458407D, -0.9961252577D, -0.5051684983D, 0.8630207346D, 0.7753185226D, -0.6315704146D, -0.6921944612D, 0.7217110418D, -0.5191659449D, -0.8546734591D, 
      0.8978622882D, -0.4402764035D, -0.1706774107D, 0.9853269617D, -0.9353430106D, -0.3537420705D, -0.9992404798D, 0.03896746794D, -0.2882064021D, -0.9575683108D, 
      -0.9663811329D, 0.2571137995D, -0.8759714238D, -0.4823630009D, -0.8303123018D, -0.5572983775D, 0.05110133755D, -0.9986934731D, -0.8558373281D, -0.5172450752D, 
      0.09887025282D, 0.9951003332D, 0.9189016087D, 0.3944867976D, -0.2439375892D, -0.9697909324D, -0.8121409387D, -0.5834613061D, -0.9910431363D, 0.1335421355D, 
      0.8492423985D, -0.5280031709D, -0.9717838994D, -0.2358729591D, 0.9949457207D, 0.1004142068D, 0.6241065508D, -0.7813392434D, 0.662910307D, 0.7486988212D, 
      -0.7197418176D, 0.6942418282D, -0.8143370775D, -0.5803922158D, 0.104521054D, -0.9945226741D, -0.1065926113D, -0.9943027784D, 0.445799684D, -0.8951327509D, 
      0.105547406D, 0.9944142724D, -0.992790267D, 0.1198644477D, -0.8334366408D, 0.552615025D, 0.9115561563D, -0.4111755999D, 0.8285544909D, -0.5599084351D, 
      0.7217097654D, -0.6921957921D, 0.4940492677D, -0.8694339084D, -0.3652321272D, -0.9309164803D, -0.9696606758D, 0.2444548501D, 0.08925509731D, -0.996008799D, 
      0.5354071276D, -0.8445941083D, -0.1053576186D, 0.9944343981D, -0.9890284586D, 0.1477251101D, 0.004856104961D, 0.9999882091D, 0.9885598478D, 0.1508291331D, 
      0.9286129562D, -0.3710498316D, -0.5832393863D, -0.8123003252D, 0.3015207509D, 0.9534596146D, -0.9575110528D, 0.2883965738D, 0.9715802154D, -0.2367105511D, 
      0.229981792D, 0.9731949318D, 0.955763816D, -0.2941352207D, 0.740956116D, 0.6715534485D, -0.9971513787D, -0.07542630764D, 0.6905710663D, -0.7232645452D, 
      -0.290713703D, -0.9568100872D, 0.5912777791D, -0.8064679708D, -0.9454592212D, -0.325740481D, 0.6664455681D, 0.74555369D, 0.6236134912D, 0.7817328275D, 
      0.9126993851D, -0.4086316587D, -0.8191762011D, 0.5735419353D, -0.8812745759D, -0.4726046147D, 0.9953313627D, 0.09651672651D, 0.9855650846D, -0.1692969699D, 
      -0.8495980887D, 0.5274306472D, 0.6174853946D, -0.7865823463D, 0.8508156371D, 0.52546432D, 0.9985032451D, -0.05469249926D, 0.1971371563D, -0.9803759185D, 
      0.6607855748D, -0.7505747292D, -0.03097494063D, 0.9995201614D, -0.6731660801D, 0.739491331D, -0.7195018362D, -0.6944905383D, 0.9727511689D, 0.2318515979D, 
      0.9997059088D, -0.0242506907D, 0.4421787429D, -0.8969269532D, 0.9981350961D, -0.061043673D, -0.9173660799D, -0.3980445648D, -0.8150056635D, -0.5794529907D, 
      -0.8789331304D, 0.4769450202D, 0.0158605829D, 0.999874213D, -0.8095464474D, 0.5870558317D, -0.9165898907D, -0.3998286786D, -0.8023542565D, 0.5968480938D, 
      -0.5176737917D, 0.8555780767D, -0.8154407307D, -0.5788405779D, 0.4022010347D, -0.9155513791D, -0.9052556868D, -0.4248672045D, 0.7317445619D, 0.6815789728D, 
      -0.5647632201D, -0.8252529947D, -0.8403276335D, -0.5420788397D, -0.9314281527D, 0.363925262D, 0.5238198472D, 0.8518290719D, 0.7432803869D, -0.6689800195D, 
      -0.985371561D, -0.1704197369D, 0.4601468731D, 0.88784281D, 0.825855404D, 0.5638819483D, 0.6182366099D, 0.7859920446D, 0.8331502863D, -0.553046653D, 
      0.1500307506D, 0.9886813308D, -0.662330369D, -0.7492119075D, -0.668598664D, 0.743623444D, 0.7025606278D, 0.7116238924D, -0.5419389763D, -0.8404178401D, 
      -0.3388616456D, 0.9408362159D, 0.8331530315D, 0.5530425174D, -0.2989720662D, -0.9542618632D, 0.2638522993D, 0.9645630949D, 0.124108739D, -0.9922686234D, 
      -0.7282649308D, -0.6852956957D, 0.6962500149D, 0.7177993569D, -0.9183535368D, 0.3957610156D, -0.6326102274D, -0.7744703352D, -0.9331891859D, -0.359385508D, 
      -0.1153779357D, -0.9933216659D, 0.9514974788D, -0.3076565421D, -0.08987977445D, -0.9959526224D, 0.6678496916D, 0.7442961705D, 0.7952400393D, -0.6062947138D, 
      -0.6462007402D, -0.7631674805D, -0.2733598753D, 0.9619118351D, 0.9669590226D, -0.254931851D, -0.9792894595D, 0.2024651934D, -0.5369502995D, -0.8436138784D, 
      -0.270036471D, -0.9628500944D, -0.6400277131D, 0.7683518247D, -0.7854537493D, -0.6189203566D, 0.06005905383D, -0.9981948257D, -0.02455770378D, 0.9996984141D, 
      -0.65983623D, 0.751409442D, -0.6253894466D, -0.7803127835D, -0.6210408851D, -0.7837781695D, 0.8348888491D, 0.5504185768D, -0.1592275245D, 0.9872419133D, 
      0.8367622488D, 0.5475663786D, -0.8675753916D, -0.4973056806D, -0.2022662628D, -0.9793305667D, 0.9399189937D, 0.3413975472D, 0.9877404807D, -0.1561049093D, 
      -0.9034455656D, 0.4287028224D, 0.1269804218D, -0.9919052235D, -0.3819600854D, 0.924178821D, 0.9754625894D, 0.2201652486D, -0.3204015856D, -0.9472818081D, 
      -0.9874760884D, 0.1577687387D, 0.02535348474D, -0.9996785487D, 0.4835130794D, -0.8753371362D, -0.2850799925D, -0.9585037287D, -0.06805516006D, -0.99768156D, 
      -0.7885244045D, -0.6150034663D, 0.3185392127D, -0.9479096845D, 0.8880043089D, 0.4598351306D, 0.6476921488D, -0.7619021462D, 0.9820241299D, 0.1887554194D, 
      0.9357275128D, -0.3527237187D, -0.8894895414D, 0.4569555293D, 0.7922791302D, 0.6101588153D, 0.7483818261D, 0.6632681526D, -0.7288929755D, -0.6846276581D, 
      0.8729032783D, -0.4878932944D, 0.8288345784D, 0.5594937369D, 0.08074567077D, 0.9967347374D, 0.9799148216D, -0.1994165048D, -0.580730673D, -0.8140957471D, 
      -0.4700049791D, -0.8826637636D, 0.2409492979D, 0.9705377045D, 0.9437816757D, -0.3305694308D, -0.8927998638D, -0.4504535528D, -0.8069622304D, 0.5906030467D, 
      0.06258973166D, 0.9980393407D, -0.9312597469D, 0.3643559849D, 0.5777449785D, 0.8162173362D, -0.3360095855D, -0.941858566D, 0.697932075D, -0.7161639607D, 
      -0.002008157227D, -0.9999979837D, -0.1827294312D, -0.9831632392D, -0.6523911722D, 0.7578824173D, -0.4302626911D, -0.9027037258D, -0.9985126289D, -0.05452091251D, 
      -0.01028102172D, -0.9999471489D, -0.4946071129D, 0.8691166802D, -0.2999350194D, 0.9539596344D, 0.8165471961D, 0.5772786819D, 0.2697460475D, 0.962931498D, 
      -0.7306287391D, -0.6827749597D, -0.7590952064D, -0.6509796216D, -0.907053853D, 0.4210146171D, -0.5104861064D, -0.8598860013D, 0.8613350597D, 0.5080373165D, 
      0.5007881595D, -0.8655698812D, -0.654158152D, 0.7563577938D, -0.8382755311D, -0.545246856D, 0.6940070834D, 0.7199681717D, 0.06950936031D, 0.9975812994D, 
      0.1702942185D, -0.9853932612D, 0.2695973274D, 0.9629731466D, 0.5519612192D, -0.8338697815D, 0.225657487D, -0.9742067022D, 0.4215262855D, -0.9068161835D, 
      0.4881873305D, -0.8727388672D, -0.3683854996D, -0.9296731273D, -0.9825390578D, 0.1860564427D, 0.81256471D, 0.5828709909D, 0.3196460933D, -0.9475370046D, 
      0.9570913859D, 0.2897862643D, -0.6876655497D, -0.7260276109D, -0.9988770922D, -0.047376731D, -0.1250179027D, 0.992154486D, -0.8280133617D, 0.560708367D, 
      0.9324863769D, -0.3612051451D, 0.6394653183D, 0.7688199442D, -0.01623847064D, -0.9998681473D, -0.9955014666D, -0.09474613458D, -0.81453315D, 0.580117012D, 
      0.4037327978D, -0.9148769469D, 0.9944263371D, 0.1054336766D, -0.1624711654D, 0.9867132919D, -0.9949487814D, -0.100383875D, -0.6995302564D, 0.7146029809D, 
      0.5263414922D, -0.85027327D, -0.5395221479D, 0.841971408D, 0.6579370318D, 0.7530729462D, 0.01426758847D, -0.9998982128D, -0.6734383991D, 0.7392433447D, 
      0.639412098D, -0.7688642071D, 0.9211571421D, 0.3891908523D, -0.146637214D, -0.9891903394D, -0.782318098D, 0.6228791163D, -0.5039610839D, -0.8637263605D, 
      -0.7743120191D, -0.6328039957D };
  
  private static final double[] Gradients3D = new double[] { 
      0.0D, 1.0D, 1.0D, 0.0D, 0.0D, -1.0D, 1.0D, 0.0D, 0.0D, 1.0D, 
      -1.0D, 0.0D, 0.0D, -1.0D, -1.0D, 0.0D, 1.0D, 0.0D, 1.0D, 0.0D, 
      -1.0D, 0.0D, 1.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D, -1.0D, 0.0D, 
      -1.0D, 0.0D, 1.0D, 1.0D, 0.0D, 0.0D, -1.0D, 1.0D, 0.0D, 0.0D, 
      1.0D, -1.0D, 0.0D, 0.0D, -1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 1.0D, 
      1.0D, 0.0D, 0.0D, -1.0D, 1.0D, 0.0D, 0.0D, 1.0D, -1.0D, 0.0D, 
      0.0D, -1.0D, -1.0D, 0.0D, 1.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D, 
      1.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D, -1.0D, 0.0D, -1.0D, 0.0D, 
      1.0D, 1.0D, 0.0D, 0.0D, -1.0D, 1.0D, 0.0D, 0.0D, 1.0D, -1.0D, 
      0.0D, 0.0D, -1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.0D, 
      0.0D, -1.0D, 1.0D, 0.0D, 0.0D, 1.0D, -1.0D, 0.0D, 0.0D, -1.0D, 
      -1.0D, 0.0D, 1.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D, 1.0D, 0.0D, 
      1.0D, 0.0D, -1.0D, 0.0D, -1.0D, 0.0D, -1.0D, 0.0D, 1.0D, 1.0D, 
      0.0D, 0.0D, -1.0D, 1.0D, 0.0D, 0.0D, 1.0D, -1.0D, 0.0D, 0.0D, 
      -1.0D, -1.0D, 0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.0D, 0.0D, -1.0D, 
      1.0D, 0.0D, 0.0D, 1.0D, -1.0D, 0.0D, 0.0D, -1.0D, -1.0D, 0.0D, 
      1.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D, 1.0D, 0.0D, 1.0D, 0.0D, 
      -1.0D, 0.0D, -1.0D, 0.0D, -1.0D, 0.0D, 1.0D, 1.0D, 0.0D, 0.0D, 
      -1.0D, 1.0D, 0.0D, 0.0D, 1.0D, -1.0D, 0.0D, 0.0D, -1.0D, -1.0D, 
      0.0D, 0.0D, 0.0D, 1.0D, 1.0D, 0.0D, 0.0D, -1.0D, 1.0D, 0.0D, 
      0.0D, 1.0D, -1.0D, 0.0D, 0.0D, -1.0D, -1.0D, 0.0D, 1.0D, 0.0D, 
      1.0D, 0.0D, -1.0D, 0.0D, 1.0D, 0.0D, 1.0D, 0.0D, -1.0D, 0.0D, 
      -1.0D, 0.0D, -1.0D, 0.0D, 1.0D, 1.0D, 0.0D, 0.0D, -1.0D, 1.0D, 
      0.0D, 0.0D, 1.0D, -1.0D, 0.0D, 0.0D, -1.0D, -1.0D, 0.0D, 0.0D, 
      1.0D, 1.0D, 0.0D, 0.0D, 0.0D, -1.0D, 1.0D, 0.0D, -1.0D, 1.0D, 
      0.0D, 0.0D, 0.0D, -1.0D, -1.0D, 0.0D };
  
  private static final double[] RandVecs3D = new double[] { 
      -0.7292736885D, -0.6618439697D, 0.1735581948D, 0.0D, 0.790292081D, -0.5480887466D, -0.2739291014D, 0.0D, 0.7217578935D, 0.6226212466D, 
      -0.3023380997D, 0.0D, 0.565683137D, -0.8208298145D, -0.0790000257D, 0.0D, 0.760049034D, -0.5555979497D, -0.3370999617D, 0.0D, 
      0.3713945616D, 0.5011264475D, 0.7816254623D, 0.0D, -0.1277062463D, -0.4254438999D, -0.8959289049D, 0.0D, -0.2881560924D, -0.5815838982D, 
      0.7607405838D, 0.0D, 0.5849561111D, -0.662820239D, -0.4674352136D, 0.0D, 0.3307171178D, 0.0391653737D, 0.94291689D, 0.0D, 
      0.8712121778D, -0.4113374369D, -0.2679381538D, 0.0D, 0.580981015D, 0.7021915846D, 0.4115677815D, 0.0D, 0.503756873D, 0.6330056931D, 
      -0.5878203852D, 0.0D, 0.4493712205D, 0.601390195D, 0.6606022552D, 0.0D, -0.6878403724D, 0.09018890807D, -0.7202371714D, 0.0D, 
      -0.5958956522D, -0.6469350577D, 0.475797649D, 0.0D, -0.5127052122D, 0.1946921978D, -0.8361987284D, 0.0D, -0.9911507142D, -0.05410276466D, 
      -0.1212153153D, 0.0D, -0.2149721042D, 0.9720882117D, -0.09397607749D, 0.0D, -0.7518650936D, -0.5428057603D, 0.3742469607D, 0.0D, 
      0.5237068895D, 0.8516377189D, -0.02107817834D, 0.0D, 0.6333504779D, 0.1926167129D, -0.7495104896D, 0.0D, -0.06788241606D, 0.3998305789D, 
      0.9140719259D, 0.0D, -0.5538628599D, -0.4729896695D, -0.6852128902D, 0.0D, -0.7261455366D, -0.5911990757D, 0.3509933228D, 0.0D, 
      -0.9229274737D, -0.1782808786D, 0.3412049336D, 0.0D, -0.6968815002D, 0.6511274338D, 0.3006480328D, 0.0D, 0.9608044783D, -0.2098363234D, 
      -0.1811724921D, 0.0D, 0.06817146062D, -0.9743405129D, 0.2145069156D, 0.0D, -0.3577285196D, -0.6697087264D, -0.6507845481D, 0.0D, 
      -0.1868621131D, 0.7648617052D, -0.6164974636D, 0.0D, -0.6541697588D, 0.3967914832D, 0.6439087246D, 0.0D, 0.6993340405D, -0.6164538506D, 
      0.3618239211D, 0.0D, -0.1546665739D, 0.6291283928D, 0.7617583057D, 0.0D, -0.6841612949D, -0.2580482182D, -0.6821542638D, 0.0D, 
      0.5383980957D, 0.4258654885D, 0.7271630328D, 0.0D, -0.5026987823D, -0.7939832935D, -0.3418836993D, 0.0D, 0.3202971715D, 0.2834415347D, 
      0.9039195862D, 0.0D, 0.8683227101D, -3.762656404E-4D, -0.4959995258D, 0.0D, 0.791120031D, -0.08511045745D, 0.6057105799D, 0.0D, 
      -0.04011016052D, -0.4397248749D, 0.8972364289D, 0.0D, 0.9145119872D, 0.3579346169D, -0.1885487608D, 0.0D, -0.9612039066D, -0.2756484276D, 
      0.01024666929D, 0.0D, 0.6510361721D, -0.2877799159D, -0.7023778346D, 0.0D, -0.2041786351D, 0.7365237271D, 0.644859585D, 0.0D, 
      -0.7718263711D, 0.3790626912D, 0.5104855816D, 0.0D, -0.3060082741D, -0.7692987727D, 0.5608371729D, 0.0D, 0.454007341D, -0.5024843065D, 
      0.7357899537D, 0.0D, 0.4816795475D, 0.6021208291D, -0.6367380315D, 0.0D, 0.6961980369D, -0.3222197429D, 0.641469197D, 0.0D, 
      -0.6532160499D, -0.6781148932D, 0.3368515753D, 0.0D, 0.5089301236D, -0.6154662304D, -0.6018234363D, 0.0D, -0.1635919754D, -0.9133604627D, 
      -0.372840892D, 0.0D, 0.52408019D, -0.8437664109D, 0.1157505864D, 0.0D, 0.5902587356D, 0.4983817807D, -0.6349883666D, 0.0D, 
      0.5863227872D, 0.494764745D, 0.6414307729D, 0.0D, 0.6779335087D, 0.2341345225D, 0.6968408593D, 0.0D, 0.7177054546D, -0.6858979348D, 
      0.120178631D, 0.0D, -0.5328819713D, -0.5205125012D, 0.6671608058D, 0.0D, -0.8654874251D, -0.0700727088D, -0.4960053754D, 0.0D, 
      -0.2861810166D, 0.7952089234D, 0.5345495242D, 0.0D, -0.04849529634D, 0.9810836427D, -0.1874115585D, 0.0D, -0.6358521667D, 0.6058348682D, 
      0.4781800233D, 0.0D, 0.6254794696D, -0.2861619734D, 0.7258696564D, 0.0D, -0.2585259868D, 0.5061949264D, -0.8227581726D, 0.0D, 
      0.02136306781D, 0.5064016808D, -0.8620330371D, 0.0D, 0.200111773D, 0.8599263484D, 0.4695550591D, 0.0D, 0.4743561372D, 0.6014985084D, 
      -0.6427953014D, 0.0D, 0.6622993731D, -0.5202474575D, -0.5391679918D, 0.0D, 0.08084972818D, -0.6532720452D, 0.7527940996D, 0.0D, 
      -0.6893687501D, 0.0592860349D, 0.7219805347D, 0.0D, -0.1121887082D, -0.9673185067D, 0.2273952515D, 0.0D, 0.7344116094D, 0.5979668656D, 
      -0.3210532909D, 0.0D, 0.5789393465D, -0.2488849713D, 0.7764570201D, 0.0D, 0.6988182827D, 0.3557169806D, -0.6205791146D, 0.0D, 
      -0.8636845529D, -0.2748771249D, -0.4224826141D, 0.0D, -0.4247027957D, -0.4640880967D, 0.777335046D, 0.0D, 0.5257722489D, -0.8427017621D, 
      0.1158329937D, 0.0D, 0.9343830603D, 0.316302472D, -0.1639543925D, 0.0D, -0.1016836419D, -0.8057303073D, -0.5834887393D, 0.0D, 
      -0.6529238969D, 0.50602126D, -0.5635892736D, 0.0D, -0.2465286165D, -0.9668205684D, -0.06694497494D, 0.0D, -0.9776897119D, -0.2099250524D, 
      -0.007368825344D, 0.0D, 0.7736893337D, 0.5734244712D, 0.2694238123D, 0.0D, -0.6095087895D, 0.4995678998D, 0.6155736747D, 0.0D, 
      0.5794535482D, 0.7434546771D, 0.3339292269D, 0.0D, -0.8226211154D, 0.08142581855D, 0.5627293636D, 0.0D, -0.510385483D, 0.4703667658D, 
      0.7199039967D, 0.0D, -0.5764971849D, -0.07231656274D, -0.8138926898D, 0.0D, 0.7250628871D, 0.3949971505D, -0.5641463116D, 0.0D, 
      -0.1525424005D, 0.4860840828D, -0.8604958341D, 0.0D, -0.5550976208D, -0.4957820792D, 0.667882296D, 0.0D, -0.1883614327D, 0.9145869398D, 
      0.357841725D, 0.0D, 0.7625556724D, -0.5414408243D, -0.3540489801D, 0.0D, -0.5870231946D, -0.3226498013D, -0.7424963803D, 0.0D, 
      0.3051124198D, 0.2262544068D, -0.9250488391D, 0.0D, 0.6379576059D, 0.577242424D, -0.5097070502D, 0.0D, -0.5966775796D, 0.1454852398D, 
      -0.7891830656D, 0.0D, -0.658330573D, 0.6555487542D, -0.3699414651D, 0.0D, 0.7434892426D, 0.2351084581D, 0.6260573129D, 0.0D, 
      0.5562114096D, 0.8264360377D, -0.0873632843D, 0.0D, -0.3028940016D, -0.8251527185D, 0.4768419182D, 0.0D, 0.1129343818D, -0.985888439D, 
      -0.1235710781D, 0.0D, 0.5937652891D, -0.5896813806D, 0.5474656618D, 0.0D, 0.6757964092D, -0.5835758614D, -0.4502648413D, 0.0D, 
      0.7242302609D, -0.1152719764D, 0.6798550586D, 0.0D, -0.9511914166D, 0.0753623979D, -0.2992580792D, 0.0D, 0.2539470961D, -0.1886339355D, 
      0.9486454084D, 0.0D, 0.571433621D, -0.1679450851D, -0.8032795685D, 0.0D, -0.06778234979D, 0.3978269256D, 0.9149531629D, 0.0D, 
      0.6074972649D, 0.733060024D, -0.3058922593D, 0.0D, -0.5435478392D, 0.1675822484D, 0.8224791405D, 0.0D, -0.5876678086D, -0.3380045064D, 
      -0.7351186982D, 0.0D, -0.7967562402D, 0.04097822706D, -0.6029098428D, 0.0D, -0.1996350917D, 0.8706294745D, 0.4496111079D, 0.0D, 
      -0.02787660336D, -0.9106232682D, -0.4122962022D, 0.0D, -0.7797625996D, -0.6257634692D, 0.01975775581D, 0.0D, -0.5211232846D, 0.7401644346D, 
      -0.4249554471D, 0.0D, 0.8575424857D, 0.4053272873D, -0.3167501783D, 0.0D, 0.1045223322D, 0.8390195772D, -0.5339674439D, 0.0D, 
      0.3501822831D, 0.9242524096D, -0.1520850155D, 0.0D, 0.1987849858D, 0.07647613266D, 0.9770547224D, 0.0D, 0.7845996363D, 0.6066256811D, 
      -0.1280964233D, 0.0D, 0.09006737436D, -0.9750989929D, -0.2026569073D, 0.0D, -0.8274343547D, -0.542299559D, 0.1458203587D, 0.0D, 
      -0.3485797732D, -0.415802277D, 0.840000362D, 0.0D, -0.2471778936D, -0.7304819962D, -0.6366310879D, 0.0D, -0.3700154943D, 0.8577948156D, 
      0.3567584454D, 0.0D, 0.5913394901D, -0.548311967D, -0.5913303597D, 0.0D, 0.1204873514D, -0.7626472379D, -0.6354935001D, 0.0D, 
      0.616959265D, 0.03079647928D, 0.7863922953D, 0.0D, 0.1258156836D, -0.6640829889D, -0.7369967419D, 0.0D, -0.6477565124D, -0.1740147258D, 
      -0.7417077429D, 0.0D, 0.6217889313D, -0.7804430448D, -0.06547655076D, 0.0D, 0.6589943422D, -0.6096987708D, 0.4404473475D, 0.0D, 
      -0.2689837504D, -0.6732403169D, -0.6887635427D, 0.0D, -0.3849775103D, 0.5676542638D, 0.7277093879D, 0.0D, 0.5754444408D, 0.8110471154D, 
      -0.1051963504D, 0.0D, 0.9141593684D, 0.3832947817D, 0.131900567D, 0.0D, -0.107925319D, 0.9245493968D, 0.3654593525D, 0.0D, 
      0.377977089D, 0.3043148782D, 0.8743716458D, 0.0D, -0.2142885215D, -0.8259286236D, 0.5214617324D, 0.0D, 0.5802544474D, 0.4148098596D, 
      -0.7008834116D, 0.0D, -0.1982660881D, 0.8567161266D, -0.4761596756D, 0.0D, -0.03381553704D, 0.3773180787D, -0.9254661404D, 0.0D, 
      -0.6867922841D, -0.6656597827D, 0.2919133642D, 0.0D, 0.7731742607D, -0.2875793547D, -0.5652430251D, 0.0D, -0.09655941928D, 0.9193708367D, 
      -0.3813575004D, 0.0D, 0.2715702457D, -0.9577909544D, -0.09426605581D, 0.0D, 0.2451015704D, -0.6917998565D, -0.6792188003D, 0.0D, 
      0.977700782D, -0.1753855374D, 0.1155036542D, 0.0D, -0.5224739938D, 0.8521606816D, 0.02903615945D, 0.0D, -0.7734880599D, -0.5261292347D, 
      0.3534179531D, 0.0D, -0.7134492443D, -0.269547243D, 0.6467878011D, 0.0D, 0.1644037271D, 0.5105846203D, -0.8439637196D, 0.0D, 
      0.6494635788D, 0.05585611296D, 0.7583384168D, 0.0D, -0.4711970882D, 0.5017280509D, -0.7254255765D, 0.0D, -0.6335764307D, -0.2381686273D, 
      -0.7361091029D, 0.0D, -0.9021533097D, -0.270947803D, -0.3357181763D, 0.0D, -0.3793711033D, 0.872258117D, 0.3086152025D, 0.0D, 
      -0.6855598966D, -0.3250143309D, 0.6514394162D, 0.0D, 0.2900942212D, -0.7799057743D, -0.5546100667D, 0.0D, -0.2098319339D, 0.85037073D, 
      0.4825351604D, 0.0D, -0.4592603758D, 0.6598504336D, -0.5947077538D, 0.0D, 0.8715945488D, 0.09616365406D, -0.4807031248D, 0.0D, 
      -0.6776666319D, 0.7118504878D, -0.1844907016D, 0.0D, 0.7044377633D, 0.312427597D, 0.637304036D, 0.0D, -0.7052318886D, -0.2401093292D, 
      -0.6670798253D, 0.0D, 0.081921007D, -0.7207336136D, -0.6883545647D, 0.0D, -0.6993680906D, -0.5875763221D, -0.4069869034D, 0.0D, 
      -0.1281454481D, 0.6419895885D, 0.7559286424D, 0.0D, -0.6337388239D, -0.6785471501D, -0.3714146849D, 0.0D, 0.5565051903D, -0.2168887573D, 
      -0.8020356851D, 0.0D, -0.5791554484D, 0.7244372011D, -0.3738578718D, 0.0D, 0.1175779076D, -0.7096451073D, 0.6946792478D, 0.0D, 
      -0.6134619607D, 0.1323631078D, 0.7785527795D, 0.0D, 0.6984635305D, -0.02980516237D, -0.715024719D, 0.0D, 0.8318082963D, -0.3930171956D, 
      0.3919597455D, 0.0D, 0.1469576422D, 0.05541651717D, -0.9875892167D, 0.0D, 0.708868575D, -0.2690503865D, 0.6520101478D, 0.0D, 
      0.2726053183D, 0.67369766D, -0.68688995D, 0.0D, -0.6591295371D, 0.3035458599D, -0.6880466294D, 0.0D, 0.4815131379D, -0.7528270071D, 
      0.4487723203D, 0.0D, 0.9430009463D, 0.1675647412D, -0.2875261255D, 0.0D, 0.434802957D, 0.7695304522D, -0.4677277752D, 0.0D, 
      0.3931996188D, 0.594473625D, 0.7014236729D, 0.0D, 0.7254336655D, -0.603925654D, 0.3301814672D, 0.0D, 0.7590235227D, -0.6506083235D, 
      0.02433313207D, 0.0D, -0.8552768592D, -0.3430042733D, 0.3883935666D, 0.0D, -0.6139746835D, 0.6981725247D, 0.3682257648D, 0.0D, 
      -0.7465905486D, -0.5752009504D, 0.3342849376D, 0.0D, 0.5730065677D, 0.810555537D, -0.1210916791D, 0.0D, -0.9225877367D, -0.3475211012D, 
      -0.167514036D, 0.0D, -0.7105816789D, -0.4719692027D, -0.5218416899D, 0.0D, -0.08564609717D, 0.3583001386D, 0.929669703D, 0.0D, 
      -0.8279697606D, -0.2043157126D, 0.5222271202D, 0.0D, 0.427944023D, 0.278165994D, 0.8599346446D, 0.0D, 0.5399079671D, -0.7857120652D, 
      -0.3019204161D, 0.0D, 0.5678404253D, -0.5495413974D, -0.6128307303D, 0.0D, -0.9896071041D, 0.1365639107D, -0.04503418428D, 0.0D, 
      -0.6154342638D, -0.6440875597D, 0.4543037336D, 0.0D, 0.1074204368D, -0.7946340692D, 0.5975094525D, 0.0D, -0.3595449969D, -0.8885529948D, 
      0.28495784D, 0.0D, -0.2180405296D, 0.1529888965D, 0.9638738118D, 0.0D, -0.7277432317D, -0.6164050508D, -0.3007234646D, 0.0D, 
      0.7249729114D, -0.00669719484D, 0.6887448187D, 0.0D, -0.5553659455D, -0.5336586252D, 0.6377908264D, 0.0D, 0.5137558015D, 0.7976208196D, 
      -0.3160000073D, 0.0D, -0.3794024848D, 0.9245608561D, -0.03522751494D, 0.0D, 0.8229248658D, 0.2745365933D, -0.4974176556D, 0.0D, 
      -0.5404114394D, 0.6091141441D, 0.5804613989D, 0.0D, 0.8036581901D, -0.2703029469D, 0.5301601931D, 0.0D, 0.6044318879D, 0.6832968393D, 
      0.4095943388D, 0.0D, 0.06389988817D, 0.9658208605D, -0.2512108074D, 0.0D, 0.1087113286D, 0.7402471173D, -0.6634877936D, 0.0D, 
      -0.713427712D, -0.6926784018D, 0.1059128479D, 0.0D, 0.6458897819D, -0.5724548511D, -0.5050958653D, 0.0D, -0.6553931414D, 0.7381471625D, 
      0.159995615D, 0.0D, 0.3910961323D, 0.9188871375D, -0.05186755998D, 0.0D, -0.4879022471D, -0.5904376907D, 0.6429111375D, 0.0D, 
      0.6014790094D, 0.7707441366D, -0.2101820095D, 0.0D, -0.5677173047D, 0.7511360995D, 0.3368851762D, 0.0D, 0.7858573506D, 0.226674665D, 
      0.5753666838D, 0.0D, -0.4520345543D, -0.604222686D, -0.6561857263D, 0.0D, 0.002272116345D, 0.4132844051D, -0.9105991643D, 0.0D, 
      -0.5815751419D, -0.5162925989D, 0.6286591339D, 0.0D, -0.03703704785D, 0.8273785755D, 0.5604221175D, 0.0D, -0.5119692504D, 0.7953543429D, 
      -0.3244980058D, 0.0D, -0.2682417366D, -0.9572290247D, -0.1084387619D, 0.0D, -0.2322482736D, -0.9679131102D, -0.09594243324D, 0.0D, 
      0.3554328906D, -0.8881505545D, 0.2913006227D, 0.0D, 0.7346520519D, -0.4371373164D, 0.5188422971D, 0.0D, 0.9985120116D, 0.04659011161D, 
      -0.02833944577D, 0.0D, -0.3727687496D, -0.9082481361D, 0.1900757285D, 0.0D, 0.91737377D, -0.3483642108D, 0.1925298489D, 0.0D, 
      0.2714911074D, 0.4147529736D, -0.8684886582D, 0.0D, 0.5131763485D, -0.7116334161D, 0.4798207128D, 0.0D, -0.8737353606D, 0.18886992D, 
      -0.4482350644D, 0.0D, 0.8460043821D, -0.3725217914D, 0.3814499973D, 0.0D, 0.8978727456D, -0.1780209141D, -0.4026575304D, 0.0D, 
      0.2178065647D, -0.9698322841D, -0.1094789531D, 0.0D, -0.1518031304D, -0.7788918132D, -0.6085091231D, 0.0D, -0.2600384876D, -0.4755398075D, 
      -0.8403819825D, 0.0D, 0.572313509D, -0.7474340931D, -0.3373418503D, 0.0D, -0.7174141009D, 0.1699017182D, -0.6756111411D, 0.0D, 
      -0.684180784D, 0.02145707593D, -0.7289967412D, 0.0D, -0.2007447902D, 0.06555605789D, -0.9774476623D, 0.0D, -0.1148803697D, -0.8044887315D, 
      0.5827524187D, 0.0D, -0.7870349638D, 0.03447489231D, 0.6159443543D, 0.0D, -0.2015596421D, 0.6859872284D, 0.6991389226D, 0.0D, 
      -0.08581082512D, -0.10920836D, -0.9903080513D, 0.0D, 0.5532693395D, 0.7325250401D, -0.396610771D, 0.0D, -0.1842489331D, -0.9777375055D, 
      -0.1004076743D, 0.0D, 0.0775473789D, -0.9111505856D, 0.4047110257D, 0.0D, 0.1399838409D, 0.7601631212D, -0.6344734459D, 0.0D, 
      0.4484419361D, -0.845289248D, 0.2904925424D, 0.0D };
  
  private static final int PrimeX = 501125321;
  
  private static final int PrimeY = 1136930381;
  
  private static final int PrimeZ = 1720413743;
  
  private static double FastMin(double a, double b) {
    return (a < b) ? a : b;
  }
  
  private static double FastMax(double a, double b) {
    return (a > b) ? a : b;
  }
  
  private static double FastAbs(double f) {
    return (f < 0.0D) ? -f : f;
  }
  
  private static double FastSqrt(double f) {
    return Math.sqrt(f);
  }
  
  private static int FastFloor(double f) {
    return (f >= 0.0D) ? (int)f : ((int)f - 1);
  }
  
  private static int FastRound(double f) {
    return (f >= 0.0D) ? (int)(f + 0.5D) : (int)(f - 0.5D);
  }
  
  private static double Lerp(double a, double b, double t) {
    return a + t * (b - a);
  }
  
  private static double InterpHermite(double t) {
    return t * t * (3.0D - 2.0D * t);
  }
  
  private static double InterpQuintic(double t) {
    return t * t * t * (t * (t * 6.0D - 15.0D) + 10.0D);
  }
  
  private static double CubicLerp(double a, double b, double c, double d, double t) {
    double p = d - c - a - b;
    return t * t * t * p + t * t * (a - b - p) + t * (c - a) + b;
  }
  
  private static double PingPong(double t) {
    t -= ((int)(t * 0.5D) * 2);
    return (t < 1.0D) ? t : (2.0D - t);
  }
  
  private void CalculateFractalBounding() {
    double gain = FastAbs(this.mGain);
    double amp = gain;
    double ampFractal = 1.0D;
    for (int i = 1; i < this.mOctaves; i++) {
      ampFractal += amp;
      amp *= gain;
    } 
    this.mFractalBounding = 1.0D / ampFractal;
  }
  
  private static int Hash(int seed, int xPrimed, int yPrimed) {
    int hash = seed ^ xPrimed ^ yPrimed;
    hash *= 668265261;
    return hash;
  }
  
  private static int Hash(int seed, int xPrimed, int yPrimed, int zPrimed) {
    int hash = seed ^ xPrimed ^ yPrimed ^ zPrimed;
    hash *= 668265261;
    return hash;
  }
  
  private static double ValCoord(int seed, int xPrimed, int yPrimed) {
    int hash = Hash(seed, xPrimed, yPrimed);
    hash *= hash;
    hash ^= hash << 19;
    return hash * 4.6566128730773926E-10D;
  }
  
  private static double ValCoord(int seed, int xPrimed, int yPrimed, int zPrimed) {
    int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
    hash *= hash;
    hash ^= hash << 19;
    return hash * 4.6566128730773926E-10D;
  }
  
  private static double GradCoord(int seed, int xPrimed, int yPrimed, double xd, double yd) {
    int hash = Hash(seed, xPrimed, yPrimed);
    hash ^= hash >> 15;
    hash &= 0xFE;
    double xg = Gradients2D[hash];
    double yg = Gradients2D[hash | 0x1];
    return xd * xg + yd * yg;
  }
  
  private static double GradCoord(int seed, int xPrimed, int yPrimed, int zPrimed, double xd, double yd, double zd) {
    int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
    hash ^= hash >> 15;
    hash &= 0xFC;
    double xg = Gradients3D[hash];
    double yg = Gradients3D[hash | 0x1];
    double zg = Gradients3D[hash | 0x2];
    return xd * xg + yd * yg + zd * zg;
  }
  
  private double GenNoiseSingle(int seed, double x, double y) {
    switch (this.mNoiseType) {
      case CellValue:
        return SingleSimplex(seed, x, y);
      case Distance:
        return SingleOpenSimplex2S(seed, x, y);
      case Distance2:
        return SingleCellular(seed, x, y);
      case Distance2Add:
        return SinglePerlin(seed, x, y);
      case Distance2Sub:
        return SingleValueCubic(seed, x, y);
      case Distance2Mul:
        return SingleValue(seed, x, y);
    } 
    return 0.0D;
  }
  
  private double GenNoiseSingle(int seed, double x, double y, double z) {
    switch (this.mNoiseType) {
      case CellValue:
        return SingleOpenSimplex2(seed, x, y, z);
      case Distance:
        return SingleOpenSimplex2S(seed, x, y, z);
      case Distance2:
        return SingleCellular(seed, x, y, z);
      case Distance2Add:
        return SinglePerlin(seed, x, y, z);
      case Distance2Sub:
        return SingleValueCubic(seed, x, y, z);
      case Distance2Mul:
        return SingleValue(seed, x, y, z);
    } 
    return 0.0D;
  }
  
  private void UpdateTransformType3D() {
    switch (this.mRotationType3D) {
      case CellValue:
        this.mTransformType3D = TransformType3D.ImproveXYPlanes;
        return;
      case Distance:
        this.mTransformType3D = TransformType3D.ImproveXZPlanes;
        return;
    } 
    switch (this.mNoiseType) {
      case CellValue:
      case Distance:
        this.mTransformType3D = TransformType3D.DefaultOpenSimplex2;
        return;
    } 
    this.mTransformType3D = TransformType3D.None;
  }
  
  private void UpdateWarpTransformType3D() {
    switch (this.mRotationType3D) {
      case CellValue:
        this.mWarpTransformType3D = TransformType3D.ImproveXYPlanes;
        return;
      case Distance:
        this.mWarpTransformType3D = TransformType3D.ImproveXZPlanes;
        return;
    } 
    switch (this.mDomainWarpType) {
      case CellValue:
      case Distance:
        this.mWarpTransformType3D = TransformType3D.DefaultOpenSimplex2;
        return;
    } 
    this.mWarpTransformType3D = TransformType3D.None;
  }
  
  private double GenFractalFBm(double x, double y) {
    int seed = this.mSeed;
    double sum = 0.0D;
    double amp = this.mFractalBounding;
    for (int i = 0; i < this.mOctaves; i++) {
      double noise = GenNoiseSingle(seed++, x, y);
      sum += noise * amp;
      amp *= Lerp(1.0D, FastMin(noise + 1.0D, 2.0D) * 0.5D, this.mWeightedStrength);
      x *= this.mLacunarity;
      y *= this.mLacunarity;
      amp *= this.mGain;
    } 
    return sum;
  }
  
  private double GenFractalFBm(double x, double y, double z) {
    int seed = this.mSeed;
    double sum = 0.0D;
    double amp = this.mFractalBounding;
    for (int i = 0; i < this.mOctaves; i++) {
      double noise = GenNoiseSingle(seed++, x, y, z);
      sum += noise * amp;
      amp *= Lerp(1.0D, (noise + 1.0D) * 0.5D, this.mWeightedStrength);
      x *= this.mLacunarity;
      y *= this.mLacunarity;
      z *= this.mLacunarity;
      amp *= this.mGain;
    } 
    return sum;
  }
  
  private double GenFractalRidged(double x, double y) {
    int seed = this.mSeed;
    double sum = 0.0D;
    double amp = this.mFractalBounding;
    for (int i = 0; i < this.mOctaves; i++) {
      double noise = FastAbs(GenNoiseSingle(seed++, x, y));
      sum += (noise * -2.0D + 1.0D) * amp;
      amp *= Lerp(1.0D, 1.0D - noise, this.mWeightedStrength);
      x *= this.mLacunarity;
      y *= this.mLacunarity;
      amp *= this.mGain;
    } 
    return sum;
  }
  
  private double GenFractalRidged(double x, double y, double z) {
    int seed = this.mSeed;
    double sum = 0.0D;
    double amp = this.mFractalBounding;
    for (int i = 0; i < this.mOctaves; i++) {
      double noise = FastAbs(GenNoiseSingle(seed++, x, y, z));
      sum += (noise * -2.0D + 1.0D) * amp;
      amp *= Lerp(1.0D, 1.0D - noise, this.mWeightedStrength);
      x *= this.mLacunarity;
      y *= this.mLacunarity;
      z *= this.mLacunarity;
      amp *= this.mGain;
    } 
    return sum;
  }
  
  private double GenFractalPingPong(double x, double y) {
    int seed = this.mSeed;
    double sum = 0.0D;
    double amp = this.mFractalBounding;
    for (int i = 0; i < this.mOctaves; i++) {
      double noise = PingPong((GenNoiseSingle(seed++, x, y) + 1.0D) * this.mPingPongStrength);
      sum += (noise - 0.5D) * 2.0D * amp;
      amp *= Lerp(1.0D, noise, this.mWeightedStrength);
      x *= this.mLacunarity;
      y *= this.mLacunarity;
      amp *= this.mGain;
    } 
    return sum;
  }
  
  private double GenFractalPingPong(double x, double y, double z) {
    int seed = this.mSeed;
    double sum = 0.0D;
    double amp = this.mFractalBounding;
    for (int i = 0; i < this.mOctaves; i++) {
      double noise = PingPong((GenNoiseSingle(seed++, x, y, z) + 1.0D) * this.mPingPongStrength);
      sum += (noise - 0.5D) * 2.0D * amp;
      amp *= Lerp(1.0D, noise, this.mWeightedStrength);
      x *= this.mLacunarity;
      y *= this.mLacunarity;
      z *= this.mLacunarity;
      amp *= this.mGain;
    } 
    return sum;
  }
  
  private double SingleSimplex(int seed, double x, double y) {
    double n0, n1, n2, SQRT3 = 1.7320507764816284D;
    double G2 = 0.21132487058639526D;
    int i = FastFloor(x);
    int j = FastFloor(y);
    double xi = x - i;
    double yi = y - j;
    double t = (xi + yi) * 0.21132487058639526D;
    double x0 = xi - t;
    double y0 = yi - t;
    i *= 501125321;
    j *= 1136930381;
    double a = 0.5D - x0 * x0 - y0 * y0;
    if (a <= 0.0D) {
      n0 = 0.0D;
    } else {
      n0 = a * a * a * a * GradCoord(seed, i, j, x0, y0);
    } 
    double c = 3.1547003477905378D * t + -0.6666666427356915D + a;
    if (c <= 0.0D) {
      n2 = 0.0D;
    } else {
      double x2 = x0 + -0.5773502588272095D;
      double y2 = y0 + -0.5773502588272095D;
      n2 = c * c * c * c * GradCoord(seed, i + 501125321, j + 1136930381, x2, y2);
    } 
    if (y0 > x0) {
      double x1 = x0 + 0.21132487058639526D;
      double y1 = y0 + -0.7886751294136047D;
      double b = 0.5D - x1 * x1 - y1 * y1;
      if (b <= 0.0D) {
        n1 = 0.0D;
      } else {
        n1 = b * b * b * b * GradCoord(seed, i, j + 1136930381, x1, y1);
      } 
    } else {
      double x1 = x0 + -0.7886751294136047D;
      double y1 = y0 + 0.21132487058639526D;
      double b = 0.5D - x1 * x1 - y1 * y1;
      if (b <= 0.0D) {
        n1 = 0.0D;
      } else {
        n1 = b * b * b * b * GradCoord(seed, i + 501125321, j, x1, y1);
      } 
    } 
    return (n0 + n1 + n2) * 99.83685302734375D;
  }
  
  private double SingleOpenSimplex2(int seed, double x, double y, double z) {
    int i = FastRound(x);
    int j = FastRound(y);
    int k = FastRound(z);
    double x0 = x - i;
    double y0 = y - j;
    double z0 = z - k;
    int xNSign = (int)(-1.0D - x0) | 0x1;
    int yNSign = (int)(-1.0D - y0) | 0x1;
    int zNSign = (int)(-1.0D - z0) | 0x1;
    double ax0 = xNSign * -x0;
    double ay0 = yNSign * -y0;
    double az0 = zNSign * -z0;
    i *= 501125321;
    j *= 1136930381;
    k *= 1720413743;
    double value = 0.0D;
    double a = 0.6D - x0 * x0 - y0 * y0 + z0 * z0;
    for (int l = 0;; l++) {
      if (a > 0.0D)
        value += a * a * a * a * GradCoord(seed, i, j, k, x0, y0, z0); 
      if (ax0 >= ay0 && ax0 >= az0) {
        double b = a + ax0 + ax0;
        if (b > 1.0D) {
          b--;
          value += b * b * b * b * GradCoord(seed, i - xNSign * 501125321, j, k, x0 + xNSign, y0, z0);
        } 
      } else if (ay0 > ax0 && ay0 >= az0) {
        double b = a + ay0 + ay0;
        if (b > 1.0D) {
          b--;
          value += b * b * b * b * GradCoord(seed, i, j - yNSign * 1136930381, k, x0, y0 + yNSign, z0);
        } 
      } else {
        double b = a + az0 + az0;
        if (b > 1.0D) {
          b--;
          value += b * b * b * b * GradCoord(seed, i, j, k - zNSign * 1720413743, x0, y0, z0 + zNSign);
        } 
      } 
      if (l == 1)
        break; 
      ax0 = 0.5D - ax0;
      ay0 = 0.5D - ay0;
      az0 = 0.5D - az0;
      x0 = xNSign * ax0;
      y0 = yNSign * ay0;
      z0 = zNSign * az0;
      a += 0.75D - ax0 - ay0 + az0;
      i += xNSign >> 1 & 0x1DDE90C9;
      j += yNSign >> 1 & 0x43C42E4D;
      k += zNSign >> 1 & 0x668B6E2F;
      xNSign = -xNSign;
      yNSign = -yNSign;
      zNSign = -zNSign;
      seed ^= 0xFFFFFFFF;
    } 
    return value * 32.69428253173828D;
  }
  
  private double SingleOpenSimplex2S(int seed, double x, double y) {
    double SQRT3 = 1.7320508075688772D;
    double G2 = 0.21132486540518713D;
    int i = FastFloor(x);
    int j = FastFloor(y);
    double xi = x - i;
    double yi = y - j;
    i *= 501125321;
    j *= 1136930381;
    int i1 = i + 501125321;
    int j1 = j + 1136930381;
    double t = (xi + yi) * 0.21132486540518713D;
    double x0 = xi - t;
    double y0 = yi - t;
    double a0 = 0.6666666666666666D - x0 * x0 - y0 * y0;
    double value = a0 * a0 * a0 * a0 * GradCoord(seed, i, j, x0, y0);
    double a1 = 3.1547005383792506D * t + -0.6666666666666666D + a0;
    double x1 = x0 - 0.5773502691896257D;
    double y1 = y0 - 0.5773502691896257D;
    value += a1 * a1 * a1 * a1 * GradCoord(seed, i1, j1, x1, y1);
    double xmyi = xi - yi;
    if (t > 0.21132486540518713D) {
      if (xi + xmyi > 1.0D) {
        double x2 = x0 + -1.3660254037844386D;
        double y2 = y0 + -0.3660254037844386D;
        double a2 = 0.6666666666666666D - x2 * x2 - y2 * y2;
        if (a2 > 0.0D)
          value += a2 * a2 * a2 * a2 * GradCoord(seed, i + 1002250642, j + 1136930381, x2, y2); 
      } else {
        double x2 = x0 + 0.21132486540518713D;
        double y2 = y0 + -0.7886751345948129D;
        double a2 = 0.6666666666666666D - x2 * x2 - y2 * y2;
        if (a2 > 0.0D)
          value += a2 * a2 * a2 * a2 * GradCoord(seed, i, j + 1136930381, x2, y2); 
      } 
      if (yi - xmyi > 1.0D) {
        double x3 = x0 + -0.3660254037844386D;
        double y3 = y0 + -1.3660254037844386D;
        double a3 = 0.6666666666666666D - x3 * x3 - y3 * y3;
        if (a3 > 0.0D)
          value += a3 * a3 * a3 * a3 * GradCoord(seed, i + 501125321, j + -2021106534, x3, y3); 
      } else {
        double x3 = x0 + -0.7886751345948129D;
        double y3 = y0 + 0.21132486540518713D;
        double a3 = 0.6666666666666666D - x3 * x3 - y3 * y3;
        if (a3 > 0.0D)
          value += a3 * a3 * a3 * a3 * GradCoord(seed, i + 501125321, j, x3, y3); 
      } 
    } else {
      if (xi + xmyi < 0.0D) {
        double x2 = x0 + 0.7886751345948129D;
        double y2 = y0 - 0.21132486540518713D;
        double a2 = 0.6666666666666666D - x2 * x2 - y2 * y2;
        if (a2 > 0.0D)
          value += a2 * a2 * a2 * a2 * GradCoord(seed, i - 501125321, j, x2, y2); 
      } else {
        double x2 = x0 + -0.7886751345948129D;
        double y2 = y0 + 0.21132486540518713D;
        double a2 = 0.6666666666666666D - x2 * x2 - y2 * y2;
        if (a2 > 0.0D)
          value += a2 * a2 * a2 * a2 * GradCoord(seed, i + 501125321, j, x2, y2); 
      } 
      if (yi < xmyi) {
        double x2 = x0 - 0.21132486540518713D;
        double y2 = y0 - -0.7886751345948129D;
        double a2 = 0.6666666666666666D - x2 * x2 - y2 * y2;
        if (a2 > 0.0D)
          value += a2 * a2 * a2 * a2 * GradCoord(seed, i, j - 1136930381, x2, y2); 
      } else {
        double x2 = x0 + 0.21132486540518713D;
        double y2 = y0 + -0.7886751345948129D;
        double a2 = 0.6666666666666666D - x2 * x2 - y2 * y2;
        if (a2 > 0.0D)
          value += a2 * a2 * a2 * a2 * GradCoord(seed, i, j + 1136930381, x2, y2); 
      } 
    } 
    return value * 18.241962432861328D;
  }
  
  private double SingleOpenSimplex2S(int seed, double x, double y, double z) {
    int i = FastFloor(x);
    int j = FastFloor(y);
    int k = FastFloor(z);
    double xi = x - i;
    double yi = y - j;
    double zi = z - k;
    i *= 501125321;
    j *= 1136930381;
    k *= 1720413743;
    int seed2 = seed + 1293373;
    int xNMask = (int)(-0.5D - xi);
    int yNMask = (int)(-0.5D - yi);
    int zNMask = (int)(-0.5D - zi);
    double x0 = xi + xNMask;
    double y0 = yi + yNMask;
    double z0 = zi + zNMask;
    double a0 = 0.75D - x0 * x0 - y0 * y0 - z0 * z0;
    double value = a0 * a0 * a0 * a0 * GradCoord(seed, i + (xNMask & 0x1DDE90C9), j + (yNMask & 0x43C42E4D), k + (zNMask & 0x668B6E2F), x0, y0, z0);
    double x1 = xi - 0.5D;
    double y1 = yi - 0.5D;
    double z1 = zi - 0.5D;
    double a1 = 0.75D - x1 * x1 - y1 * y1 - z1 * z1;
    value += a1 * a1 * a1 * a1 * GradCoord(seed2, i + 501125321, j + 1136930381, k + 1720413743, x1, y1, z1);
    double xAFlipMask0 = ((xNMask | 0x1) << 1) * x1;
    double yAFlipMask0 = ((yNMask | 0x1) << 1) * y1;
    double zAFlipMask0 = ((zNMask | 0x1) << 1) * z1;
    double xAFlipMask1 = (-2 - (xNMask << 2)) * x1 - 1.0D;
    double yAFlipMask1 = (-2 - (yNMask << 2)) * y1 - 1.0D;
    double zAFlipMask1 = (-2 - (zNMask << 2)) * z1 - 1.0D;
    boolean skip5 = false;
    double a2 = xAFlipMask0 + a0;
    if (a2 > 0.0D) {
      double x2 = x0 - (xNMask | 0x1);
      double y2 = y0;
      double z2 = z0;
      value += a2 * a2 * a2 * a2 * GradCoord(seed, i + ((xNMask ^ 0xFFFFFFFF) & 0x1DDE90C9), j + (yNMask & 0x43C42E4D), k + (zNMask & 0x668B6E2F), x2, y2, z2);
    } else {
      double a3 = yAFlipMask0 + zAFlipMask0 + a0;
      if (a3 > 0.0D) {
        double x3 = x0;
        double y3 = y0 - (yNMask | 0x1);
        double z3 = z0 - (zNMask | 0x1);
        value += a3 * a3 * a3 * a3 * GradCoord(seed, i + (xNMask & 0x1DDE90C9), j + ((yNMask ^ 0xFFFFFFFF) & 0x43C42E4D), k + ((zNMask ^ 0xFFFFFFFF) & 0x668B6E2F), x3, y3, z3);
      } 
      double a4 = xAFlipMask1 + a1;
      if (a4 > 0.0D) {
        double x4 = (xNMask | 0x1) + x1;
        double y4 = y1;
        double z4 = z1;
        value += a4 * a4 * a4 * a4 * GradCoord(seed2, i + (xNMask & 0x3BBD2192), j + 1136930381, k + 1720413743, x4, y4, z4);
        skip5 = true;
      } 
    } 
    boolean skip9 = false;
    double a6 = yAFlipMask0 + a0;
    if (a6 > 0.0D) {
      double x6 = x0;
      double y6 = y0 - (yNMask | 0x1);
      double z6 = z0;
      value += a6 * a6 * a6 * a6 * GradCoord(seed, i + (xNMask & 0x1DDE90C9), j + ((yNMask ^ 0xFFFFFFFF) & 0x43C42E4D), k + (zNMask & 0x668B6E2F), x6, y6, z6);
    } else {
      double a7 = xAFlipMask0 + zAFlipMask0 + a0;
      if (a7 > 0.0D) {
        double x7 = x0 - (xNMask | 0x1);
        double y7 = y0;
        double z7 = z0 - (zNMask | 0x1);
        value += a7 * a7 * a7 * a7 * GradCoord(seed, i + ((xNMask ^ 0xFFFFFFFF) & 0x1DDE90C9), j + (yNMask & 0x43C42E4D), k + ((zNMask ^ 0xFFFFFFFF) & 0x668B6E2F), x7, y7, z7);
      } 
      double a8 = yAFlipMask1 + a1;
      if (a8 > 0.0D) {
        double x8 = x1;
        double y8 = (yNMask | 0x1) + y1;
        double z8 = z1;
        value += a8 * a8 * a8 * a8 * GradCoord(seed2, i + 501125321, j + (yNMask & 0x87885C9A), k + 1720413743, x8, y8, z8);
        skip9 = true;
      } 
    } 
    boolean skipD = false;
    double aA = zAFlipMask0 + a0;
    if (aA > 0.0D) {
      double xA = x0;
      double yA = y0;
      double zA = z0 - (zNMask | 0x1);
      value += aA * aA * aA * aA * GradCoord(seed, i + (xNMask & 0x1DDE90C9), j + (yNMask & 0x43C42E4D), k + ((zNMask ^ 0xFFFFFFFF) & 0x668B6E2F), xA, yA, zA);
    } else {
      double aB = xAFlipMask0 + yAFlipMask0 + a0;
      if (aB > 0.0D) {
        double xB = x0 - (xNMask | 0x1);
        double yB = y0 - (yNMask | 0x1);
        double zB = z0;
        value += aB * aB * aB * aB * GradCoord(seed, i + ((xNMask ^ 0xFFFFFFFF) & 0x1DDE90C9), j + ((yNMask ^ 0xFFFFFFFF) & 0x43C42E4D), k + (zNMask & 0x668B6E2F), xB, yB, zB);
      } 
      double aC = zAFlipMask1 + a1;
      if (aC > 0.0D) {
        double xC = x1;
        double yC = y1;
        double zC = (zNMask | 0x1) + z1;
        value += aC * aC * aC * aC * GradCoord(seed2, i + 501125321, j + 1136930381, k + (zNMask & 0xCD16DC5E), xC, yC, zC);
        skipD = true;
      } 
    } 
    if (!skip5) {
      double a5 = yAFlipMask1 + zAFlipMask1 + a1;
      if (a5 > 0.0D) {
        double x5 = x1;
        double y5 = (yNMask | 0x1) + y1;
        double z5 = (zNMask | 0x1) + z1;
        value += a5 * a5 * a5 * a5 * GradCoord(seed2, i + 501125321, j + (yNMask & 0x87885C9A), k + (zNMask & 0xCD16DC5E), x5, y5, z5);
      } 
    } 
    if (!skip9) {
      double a9 = xAFlipMask1 + zAFlipMask1 + a1;
      if (a9 > 0.0D) {
        double x9 = (xNMask | 0x1) + x1;
        double y9 = y1;
        double z9 = (zNMask | 0x1) + z1;
        value += a9 * a9 * a9 * a9 * GradCoord(seed2, i + (xNMask & 0x3BBD2192), j + 1136930381, k + (zNMask & 0xCD16DC5E), x9, y9, z9);
      } 
    } 
    if (!skipD) {
      double aD = xAFlipMask1 + yAFlipMask1 + a1;
      if (aD > 0.0D) {
        double xD = (xNMask | 0x1) + x1;
        double yD = (yNMask | 0x1) + y1;
        double zD = z1;
        value += aD * aD * aD * aD * GradCoord(seed2, i + (xNMask & 0x3BBD2192), j + (yNMask & 0x87885C9A), k + 1720413743, xD, yD, zD);
      } 
    } 
    return value * 9.046026229858398D;
  }
  
  private double SingleCellular(int seed, double x, double y) {
    int xi, xr = FastRound(x);
    int yr = FastRound(y);
    double distance0 = Double.MAX_VALUE;
    double distance1 = Double.MAX_VALUE;
    int closestHash = 0;
    double cellularJitter = 0.43701595D * this.mCellularJitterModifier;
    int xPrimed = (xr - 1) * 501125321;
    int yPrimedBase = (yr - 1) * 1136930381;
    switch (this.mCellularDistanceFunction) {
      default:
        for (xi = xr - 1; xi <= xr + 1; xi++) {
          int yPrimed = yPrimedBase;
          for (int yi = yr - 1; yi <= yr + 1; yi++) {
            int hash = Hash(seed, xPrimed, yPrimed);
            int idx = hash & 0x1FE;
            double vecX = xi - x + RandVecs2D[idx] * cellularJitter;
            double vecY = yi - y + RandVecs2D[idx | 0x1] * cellularJitter;
            double newDistance = vecX * vecX + vecY * vecY;
            distance1 = FastMax(FastMin(distance1, newDistance), distance0);
            if (newDistance < distance0) {
              distance0 = newDistance;
              closestHash = hash;
            } 
            yPrimed += 1136930381;
          } 
          xPrimed += 501125321;
        } 
        break;
      case Distance2:
        for (xi = xr - 1; xi <= xr + 1; xi++) {
          int yPrimed = yPrimedBase;
          for (int yi = yr - 1; yi <= yr + 1; yi++) {
            int hash = Hash(seed, xPrimed, yPrimed);
            int idx = hash & 0x1FE;
            double vecX = xi - x + RandVecs2D[idx] * cellularJitter;
            double vecY = yi - y + RandVecs2D[idx | 0x1] * cellularJitter;
            double newDistance = FastAbs(vecX) + FastAbs(vecY);
            distance1 = FastMax(FastMin(distance1, newDistance), distance0);
            if (newDistance < distance0) {
              distance0 = newDistance;
              closestHash = hash;
            } 
            yPrimed += 1136930381;
          } 
          xPrimed += 501125321;
        } 
        break;
      case Distance2Add:
        for (xi = xr - 1; xi <= xr + 1; xi++) {
          int yPrimed = yPrimedBase;
          for (int yi = yr - 1; yi <= yr + 1; yi++) {
            int hash = Hash(seed, xPrimed, yPrimed);
            int idx = hash & 0x1FE;
            double vecX = xi - x + RandVecs2D[idx] * cellularJitter;
            double vecY = yi - y + RandVecs2D[idx | 0x1] * cellularJitter;
            double newDistance = FastAbs(vecX) + FastAbs(vecY) + vecX * vecX + vecY * vecY;
            distance1 = FastMax(FastMin(distance1, newDistance), distance0);
            if (newDistance < distance0) {
              distance0 = newDistance;
              closestHash = hash;
            } 
            yPrimed += 1136930381;
          } 
          xPrimed += 501125321;
        } 
        break;
    } 
    if (this.mCellularDistanceFunction == CellularDistanceFunction.Euclidean && this.mCellularReturnType != CellularReturnType.CellValue) {
      distance0 = FastSqrt(distance0);
      if (this.mCellularReturnType != CellularReturnType.Distance)
        distance1 = FastSqrt(distance1); 
    } 
    switch (this.mCellularReturnType) {
      case CellValue:
        return closestHash * 4.6566128730773926E-10D;
      case Distance:
        return distance0 - 1.0D;
      case Distance2:
        return distance1 - 1.0D;
      case Distance2Add:
        return (distance1 + distance0) * 0.5D - 1.0D;
      case Distance2Sub:
        return distance1 - distance0 - 1.0D;
      case Distance2Mul:
        return distance1 * distance0 * 0.5D - 1.0D;
      case Distance2Div:
        return distance0 / distance1 - 1.0D;
    } 
    return 0.0D;
  }
  
  private double SingleCellular(int seed, double x, double y, double z) {
    int xi, xr = FastRound(x);
    int yr = FastRound(y);
    int zr = FastRound(z);
    double distance0 = Double.MAX_VALUE;
    double distance1 = Double.MAX_VALUE;
    int closestHash = 0;
    double cellularJitter = 0.39614353D * this.mCellularJitterModifier;
    int xPrimed = (xr - 1) * 501125321;
    int yPrimedBase = (yr - 1) * 1136930381;
    int zPrimedBase = (zr - 1) * 1720413743;
    switch (this.mCellularDistanceFunction) {
      case CellValue:
      case Distance:
        for (xi = xr - 1; xi <= xr + 1; xi++) {
          int yPrimed = yPrimedBase;
          for (int yi = yr - 1; yi <= yr + 1; yi++) {
            int zPrimed = zPrimedBase;
            for (int zi = zr - 1; zi <= zr + 1; zi++) {
              int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
              int idx = hash & 0x3FC;
              double vecX = xi - x + RandVecs3D[idx] * cellularJitter;
              double vecY = yi - y + RandVecs3D[idx | 0x1] * cellularJitter;
              double vecZ = zi - z + RandVecs3D[idx | 0x2] * cellularJitter;
              double newDistance = vecX * vecX + vecY * vecY + vecZ * vecZ;
              distance1 = FastMax(FastMin(distance1, newDistance), distance0);
              if (newDistance < distance0) {
                distance0 = newDistance;
                closestHash = hash;
              } 
              zPrimed += 1720413743;
            } 
            yPrimed += 1136930381;
          } 
          xPrimed += 501125321;
        } 
        break;
      case Distance2:
        for (xi = xr - 1; xi <= xr + 1; xi++) {
          int yPrimed = yPrimedBase;
          for (int yi = yr - 1; yi <= yr + 1; yi++) {
            int zPrimed = zPrimedBase;
            for (int zi = zr - 1; zi <= zr + 1; zi++) {
              int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
              int idx = hash & 0x3FC;
              double vecX = xi - x + RandVecs3D[idx] * cellularJitter;
              double vecY = yi - y + RandVecs3D[idx | 0x1] * cellularJitter;
              double vecZ = zi - z + RandVecs3D[idx | 0x2] * cellularJitter;
              double newDistance = FastAbs(vecX) + FastAbs(vecY) + FastAbs(vecZ);
              distance1 = FastMax(FastMin(distance1, newDistance), distance0);
              if (newDistance < distance0) {
                distance0 = newDistance;
                closestHash = hash;
              } 
              zPrimed += 1720413743;
            } 
            yPrimed += 1136930381;
          } 
          xPrimed += 501125321;
        } 
        break;
      case Distance2Add:
        for (xi = xr - 1; xi <= xr + 1; xi++) {
          int yPrimed = yPrimedBase;
          for (int yi = yr - 1; yi <= yr + 1; yi++) {
            int zPrimed = zPrimedBase;
            for (int zi = zr - 1; zi <= zr + 1; zi++) {
              int hash = Hash(seed, xPrimed, yPrimed, zPrimed);
              int idx = hash & 0x3FC;
              double vecX = xi - x + RandVecs3D[idx] * cellularJitter;
              double vecY = yi - y + RandVecs3D[idx | 0x1] * cellularJitter;
              double vecZ = zi - z + RandVecs3D[idx | 0x2] * cellularJitter;
              double newDistance = FastAbs(vecX) + FastAbs(vecY) + FastAbs(vecZ) + vecX * vecX + vecY * vecY + vecZ * vecZ;
              distance1 = FastMax(FastMin(distance1, newDistance), distance0);
              if (newDistance < distance0) {
                distance0 = newDistance;
                closestHash = hash;
              } 
              zPrimed += 1720413743;
            } 
            yPrimed += 1136930381;
          } 
          xPrimed += 501125321;
        } 
        break;
    } 
    if (this.mCellularDistanceFunction == CellularDistanceFunction.Euclidean && this.mCellularReturnType != CellularReturnType.CellValue) {
      distance0 = FastSqrt(distance0);
      if (this.mCellularReturnType != CellularReturnType.Distance)
        distance1 = FastSqrt(distance1); 
    } 
    switch (this.mCellularReturnType) {
      case CellValue:
        return closestHash * 4.6566128730773926E-10D;
      case Distance:
        return distance0 - 1.0D;
      case Distance2:
        return distance1 - 1.0D;
      case Distance2Add:
        return (distance1 + distance0) * 0.5D - 1.0D;
      case Distance2Sub:
        return distance1 - distance0 - 1.0D;
      case Distance2Mul:
        return distance1 * distance0 * 0.5D - 1.0D;
      case Distance2Div:
        return distance0 / distance1 - 1.0D;
    } 
    return 0.0D;
  }
  
  private double SinglePerlin(int seed, double x, double y) {
    int x0 = FastFloor(x);
    int y0 = FastFloor(y);
    double xd0 = x - x0;
    double yd0 = y - y0;
    double xd1 = xd0 - 1.0D;
    double yd1 = yd0 - 1.0D;
    double xs = InterpQuintic(xd0);
    double ys = InterpQuintic(yd0);
    x0 *= 501125321;
    y0 *= 1136930381;
    int x1 = x0 + 501125321;
    int y1 = y0 + 1136930381;
    double xf0 = Lerp(GradCoord(seed, x0, y0, xd0, yd0), GradCoord(seed, x1, y0, xd1, yd0), xs);
    double xf1 = Lerp(GradCoord(seed, x0, y1, xd0, yd1), GradCoord(seed, x1, y1, xd1, yd1), xs);
    return Lerp(xf0, xf1, ys) * 1.4247691631317139D;
  }
  
  private double SinglePerlin(int seed, double x, double y, double z) {
    int x0 = FastFloor(x);
    int y0 = FastFloor(y);
    int z0 = FastFloor(z);
    double xd0 = x - x0;
    double yd0 = y - y0;
    double zd0 = z - z0;
    double xd1 = xd0 - 1.0D;
    double yd1 = yd0 - 1.0D;
    double zd1 = zd0 - 1.0D;
    double xs = InterpQuintic(xd0);
    double ys = InterpQuintic(yd0);
    double zs = InterpQuintic(zd0);
    x0 *= 501125321;
    y0 *= 1136930381;
    z0 *= 1720413743;
    int x1 = x0 + 501125321;
    int y1 = y0 + 1136930381;
    int z1 = z0 + 1720413743;
    double xf00 = Lerp(GradCoord(seed, x0, y0, z0, xd0, yd0, zd0), GradCoord(seed, x1, y0, z0, xd1, yd0, zd0), xs);
    double xf10 = Lerp(GradCoord(seed, x0, y1, z0, xd0, yd1, zd0), GradCoord(seed, x1, y1, z0, xd1, yd1, zd0), xs);
    double xf01 = Lerp(GradCoord(seed, x0, y0, z1, xd0, yd0, zd1), GradCoord(seed, x1, y0, z1, xd1, yd0, zd1), xs);
    double xf11 = Lerp(GradCoord(seed, x0, y1, z1, xd0, yd1, zd1), GradCoord(seed, x1, y1, z1, xd1, yd1, zd1), xs);
    double yf0 = Lerp(xf00, xf10, ys);
    double yf1 = Lerp(xf01, xf11, ys);
    return Lerp(yf0, yf1, zs) * 0.9649214148521423D;
  }
  
  private double SingleValueCubic(int seed, double x, double y) {
    int x1 = FastFloor(x);
    int y1 = FastFloor(y);
    double xs = x - x1;
    double ys = y - y1;
    x1 *= 501125321;
    y1 *= 1136930381;
    int x0 = x1 - 501125321;
    int y0 = y1 - 1136930381;
    int x2 = x1 + 501125321;
    int y2 = y1 + 1136930381;
    int x3 = x1 + 1002250642;
    int y3 = y1 + -2021106534;
    return CubicLerp(
        CubicLerp(ValCoord(seed, x0, y0), ValCoord(seed, x1, y0), ValCoord(seed, x2, y0), ValCoord(seed, x3, y0), xs), 
        CubicLerp(ValCoord(seed, x0, y1), ValCoord(seed, x1, y1), ValCoord(seed, x2, y1), ValCoord(seed, x3, y1), xs), 
        CubicLerp(ValCoord(seed, x0, y2), ValCoord(seed, x1, y2), ValCoord(seed, x2, y2), ValCoord(seed, x3, y2), xs), 
        CubicLerp(ValCoord(seed, x0, y3), ValCoord(seed, x1, y3), ValCoord(seed, x2, y3), ValCoord(seed, x3, y3), xs), ys) * 0.4444444444444444D;
  }
  
  private double SingleValueCubic(int seed, double x, double y, double z) {
    int x1 = FastFloor(x);
    int y1 = FastFloor(y);
    int z1 = FastFloor(z);
    double xs = x - x1;
    double ys = y - y1;
    double zs = z - z1;
    x1 *= 501125321;
    y1 *= 1136930381;
    z1 *= 1720413743;
    int x0 = x1 - 501125321;
    int y0 = y1 - 1136930381;
    int z0 = z1 - 1720413743;
    int x2 = x1 + 501125321;
    int y2 = y1 + 1136930381;
    int z2 = z1 + 1720413743;
    int x3 = x1 + 1002250642;
    int y3 = y1 + -2021106534;
    int z3 = z1 + -854139810;
    return CubicLerp(
        CubicLerp(
          CubicLerp(ValCoord(seed, x0, y0, z0), ValCoord(seed, x1, y0, z0), ValCoord(seed, x2, y0, z0), ValCoord(seed, x3, y0, z0), xs), 
          CubicLerp(ValCoord(seed, x0, y1, z0), ValCoord(seed, x1, y1, z0), ValCoord(seed, x2, y1, z0), ValCoord(seed, x3, y1, z0), xs), 
          CubicLerp(ValCoord(seed, x0, y2, z0), ValCoord(seed, x1, y2, z0), ValCoord(seed, x2, y2, z0), ValCoord(seed, x3, y2, z0), xs), 
          CubicLerp(ValCoord(seed, x0, y3, z0), ValCoord(seed, x1, y3, z0), ValCoord(seed, x2, y3, z0), ValCoord(seed, x3, y3, z0), xs), ys), 
        
        CubicLerp(
          CubicLerp(ValCoord(seed, x0, y0, z1), ValCoord(seed, x1, y0, z1), ValCoord(seed, x2, y0, z1), ValCoord(seed, x3, y0, z1), xs), 
          CubicLerp(ValCoord(seed, x0, y1, z1), ValCoord(seed, x1, y1, z1), ValCoord(seed, x2, y1, z1), ValCoord(seed, x3, y1, z1), xs), 
          CubicLerp(ValCoord(seed, x0, y2, z1), ValCoord(seed, x1, y2, z1), ValCoord(seed, x2, y2, z1), ValCoord(seed, x3, y2, z1), xs), 
          CubicLerp(ValCoord(seed, x0, y3, z1), ValCoord(seed, x1, y3, z1), ValCoord(seed, x2, y3, z1), ValCoord(seed, x3, y3, z1), xs), ys), 
        
        CubicLerp(
          CubicLerp(ValCoord(seed, x0, y0, z2), ValCoord(seed, x1, y0, z2), ValCoord(seed, x2, y0, z2), ValCoord(seed, x3, y0, z2), xs), 
          CubicLerp(ValCoord(seed, x0, y1, z2), ValCoord(seed, x1, y1, z2), ValCoord(seed, x2, y1, z2), ValCoord(seed, x3, y1, z2), xs), 
          CubicLerp(ValCoord(seed, x0, y2, z2), ValCoord(seed, x1, y2, z2), ValCoord(seed, x2, y2, z2), ValCoord(seed, x3, y2, z2), xs), 
          CubicLerp(ValCoord(seed, x0, y3, z2), ValCoord(seed, x1, y3, z2), ValCoord(seed, x2, y3, z2), ValCoord(seed, x3, y3, z2), xs), ys), 
        
        CubicLerp(
          CubicLerp(ValCoord(seed, x0, y0, z3), ValCoord(seed, x1, y0, z3), ValCoord(seed, x2, y0, z3), ValCoord(seed, x3, y0, z3), xs), 
          CubicLerp(ValCoord(seed, x0, y1, z3), ValCoord(seed, x1, y1, z3), ValCoord(seed, x2, y1, z3), ValCoord(seed, x3, y1, z3), xs), 
          CubicLerp(ValCoord(seed, x0, y2, z3), ValCoord(seed, x1, y2, z3), ValCoord(seed, x2, y2, z3), ValCoord(seed, x3, y2, z3), xs), 
          CubicLerp(ValCoord(seed, x0, y3, z3), ValCoord(seed, x1, y3, z3), ValCoord(seed, x2, y3, z3), ValCoord(seed, x3, y3, z3), xs), ys), zs) * 0.2962962962962963D;
  }
  
  private double SingleValue(int seed, double x, double y) {
    int x0 = FastFloor(x);
    int y0 = FastFloor(y);
    double xs = InterpHermite(x - x0);
    double ys = InterpHermite(y - y0);
    x0 *= 501125321;
    y0 *= 1136930381;
    int x1 = x0 + 501125321;
    int y1 = y0 + 1136930381;
    double xf0 = Lerp(ValCoord(seed, x0, y0), ValCoord(seed, x1, y0), xs);
    double xf1 = Lerp(ValCoord(seed, x0, y1), ValCoord(seed, x1, y1), xs);
    return Lerp(xf0, xf1, ys);
  }
  
  private double SingleValue(int seed, double x, double y, double z) {
    int x0 = FastFloor(x);
    int y0 = FastFloor(y);
    int z0 = FastFloor(z);
    double xs = InterpHermite(x - x0);
    double ys = InterpHermite(y - y0);
    double zs = InterpHermite(z - z0);
    x0 *= 501125321;
    y0 *= 1136930381;
    z0 *= 1720413743;
    int x1 = x0 + 501125321;
    int y1 = y0 + 1136930381;
    int z1 = z0 + 1720413743;
    double xf00 = Lerp(ValCoord(seed, x0, y0, z0), ValCoord(seed, x1, y0, z0), xs);
    double xf10 = Lerp(ValCoord(seed, x0, y1, z0), ValCoord(seed, x1, y1, z0), xs);
    double xf01 = Lerp(ValCoord(seed, x0, y0, z1), ValCoord(seed, x1, y0, z1), xs);
    double xf11 = Lerp(ValCoord(seed, x0, y1, z1), ValCoord(seed, x1, y1, z1), xs);
    double yf0 = Lerp(xf00, xf10, ys);
    double yf1 = Lerp(xf01, xf11, ys);
    return Lerp(yf0, yf1, zs);
  }
  
  private void DoSingleDomainWarp(int seed, double amp, double freq, double x, double y, Vector2 coord) {
    switch (this.mDomainWarpType) {
      case CellValue:
        SingleDomainWarpSimplexGradient(seed, amp * 38.283687591552734D, freq, x, y, coord, false);
        break;
      case Distance:
        SingleDomainWarpSimplexGradient(seed, amp * 16.0D, freq, x, y, coord, true);
        break;
      case Distance2:
        SingleDomainWarpBasicGrid(seed, amp, freq, x, y, coord);
        break;
    } 
  }
  
  private void DoSingleDomainWarp(int seed, double amp, double freq, double x, double y, double z, Vector3 coord) {
    switch (this.mDomainWarpType) {
      case CellValue:
        SingleDomainWarpOpenSimplex2Gradient(seed, amp * 32.69428253173828D, freq, x, y, z, coord, false);
        break;
      case Distance:
        SingleDomainWarpOpenSimplex2Gradient(seed, amp * 7.71604938271605D, freq, x, y, z, coord, true);
        break;
      case Distance2:
        SingleDomainWarpBasicGrid(seed, amp, freq, x, y, z, coord);
        break;
    } 
  }
  
  private void DomainWarpSingle(Vector2 coord) {
    double SQRT3, F2, t;
    int seed = this.mSeed;
    double amp = this.mDomainWarpAmp * this.mFractalBounding;
    double freq = this.mFrequency;
    double xs = coord.x;
    double ys = coord.y;
    switch (this.mDomainWarpType) {
      case CellValue:
      case Distance:
        SQRT3 = 1.7320508075688772D;
        F2 = 0.3660254037844386D;
        t = (xs + ys) * 0.3660254037844386D;
        xs += t;
        ys += t;
        break;
    } 
    DoSingleDomainWarp(seed, amp, freq, xs, ys, coord);
  }
  
  private void DomainWarpSingle(Vector3 coord) {
    double xy, xz, R3, s2, r;
    int seed = this.mSeed;
    double amp = this.mDomainWarpAmp * this.mFractalBounding;
    double freq = this.mFrequency;
    double xs = coord.x;
    double ys = coord.y;
    double zs = coord.z;
    switch (this.mWarpTransformType3D) {
      case CellValue:
        xy = xs + ys;
        s2 = xy * -0.211324865405187D;
        zs *= 0.577350269189626D;
        xs += s2 - zs;
        ys = ys + s2 - zs;
        zs += xy * 0.577350269189626D;
        break;
      case Distance:
        xz = xs + zs;
        s2 = xz * -0.211324865405187D;
        ys *= 0.577350269189626D;
        xs += s2 - ys;
        zs += s2 - ys;
        ys += xz * 0.577350269189626D;
        break;
      case Distance2:
        R3 = 0.6666666666666666D;
        r = (xs + ys + zs) * 0.6666666666666666D;
        xs = r - xs;
        ys = r - ys;
        zs = r - zs;
        break;
    } 
    DoSingleDomainWarp(seed, amp, freq, xs, ys, zs, coord);
  }
  
  private void DomainWarpFractalProgressive(Vector2 coord) {
    int seed = this.mSeed;
    double amp = this.mDomainWarpAmp * this.mFractalBounding;
    double freq = this.mFrequency;
    for (int i = 0; i < this.mOctaves; i++) {
      double SQRT3, F2, t, xs = coord.x;
      double ys = coord.y;
      switch (this.mDomainWarpType) {
        case CellValue:
        case Distance:
          SQRT3 = 1.7320508075688772D;
          F2 = 0.3660254037844386D;
          t = (xs + ys) * 0.3660254037844386D;
          xs += t;
          ys += t;
          break;
      } 
      DoSingleDomainWarp(seed, amp, freq, xs, ys, coord);
      seed++;
      amp *= this.mGain;
      freq *= this.mLacunarity;
    } 
  }
  
  private void DomainWarpFractalProgressive(Vector3 coord) {
    int seed = this.mSeed;
    double amp = this.mDomainWarpAmp * this.mFractalBounding;
    double freq = this.mFrequency;
    for (int i = 0; i < this.mOctaves; i++) {
      double xy, xz, R3, s2, r, xs = coord.x;
      double ys = coord.y;
      double zs = coord.z;
      switch (this.mWarpTransformType3D) {
        case CellValue:
          xy = xs + ys;
          s2 = xy * -0.211324865405187D;
          zs *= 0.577350269189626D;
          xs += s2 - zs;
          ys = ys + s2 - zs;
          zs += xy * 0.577350269189626D;
          break;
        case Distance:
          xz = xs + zs;
          s2 = xz * -0.211324865405187D;
          ys *= 0.577350269189626D;
          xs += s2 - ys;
          zs += s2 - ys;
          ys += xz * 0.577350269189626D;
          break;
        case Distance2:
          R3 = 0.6666666666666666D;
          r = (xs + ys + zs) * 0.6666666666666666D;
          xs = r - xs;
          ys = r - ys;
          zs = r - zs;
          break;
      } 
      DoSingleDomainWarp(seed, amp, freq, xs, ys, zs, coord);
      seed++;
      amp *= this.mGain;
      freq *= this.mLacunarity;
    } 
  }
  
  private void DomainWarpFractalIndependent(Vector2 coord) {
    double SQRT3, F2, t, xs = coord.x;
    double ys = coord.y;
    switch (this.mDomainWarpType) {
      case CellValue:
      case Distance:
        SQRT3 = 1.7320508075688772D;
        F2 = 0.3660254037844386D;
        t = (xs + ys) * 0.3660254037844386D;
        xs += t;
        ys += t;
        break;
    } 
    int seed = this.mSeed;
    double amp = this.mDomainWarpAmp * this.mFractalBounding;
    double freq = this.mFrequency;
    for (int i = 0; i < this.mOctaves; i++) {
      DoSingleDomainWarp(seed, amp, freq, xs, ys, coord);
      seed++;
      amp *= this.mGain;
      freq *= this.mLacunarity;
    } 
  }
  
  private void DomainWarpFractalIndependent(Vector3 coord) {
    double xy, xz, R3, s2, r, xs = coord.x;
    double ys = coord.y;
    double zs = coord.z;
    switch (this.mWarpTransformType3D) {
      case CellValue:
        xy = xs + ys;
        s2 = xy * -0.211324865405187D;
        zs *= 0.577350269189626D;
        xs += s2 - zs;
        ys = ys + s2 - zs;
        zs += xy * 0.577350269189626D;
        break;
      case Distance:
        xz = xs + zs;
        s2 = xz * -0.211324865405187D;
        ys *= 0.577350269189626D;
        xs += s2 - ys;
        zs += s2 - ys;
        ys += xz * 0.577350269189626D;
        break;
      case Distance2:
        R3 = 0.6666666666666666D;
        r = (xs + ys + zs) * 0.6666666666666666D;
        xs = r - xs;
        ys = r - ys;
        zs = r - zs;
        break;
    } 
    int seed = this.mSeed;
    double amp = this.mDomainWarpAmp * this.mFractalBounding;
    double freq = this.mFrequency;
    for (int i = 0; i < this.mOctaves; i++) {
      DoSingleDomainWarp(seed, amp, freq, xs, ys, zs, coord);
      seed++;
      amp *= this.mGain;
      freq *= this.mLacunarity;
    } 
  }
  
  private void SingleDomainWarpBasicGrid(int seed, double warpAmp, double frequency, double x, double y, Vector2 coord) {
    double xf = x * frequency;
    double yf = y * frequency;
    int x0 = FastFloor(xf);
    int y0 = FastFloor(yf);
    double xs = InterpHermite(xf - x0);
    double ys = InterpHermite(yf - y0);
    x0 *= 501125321;
    y0 *= 1136930381;
    int x1 = x0 + 501125321;
    int y1 = y0 + 1136930381;
    int hash0 = Hash(seed, x0, y0) & 0x1FE;
    int hash1 = Hash(seed, x1, y0) & 0x1FE;
    double lx0x = Lerp(RandVecs2D[hash0], RandVecs2D[hash1], xs);
    double ly0x = Lerp(RandVecs2D[hash0 | 0x1], RandVecs2D[hash1 | 0x1], xs);
    hash0 = Hash(seed, x0, y1) & 0x1FE;
    hash1 = Hash(seed, x1, y1) & 0x1FE;
    double lx1x = Lerp(RandVecs2D[hash0], RandVecs2D[hash1], xs);
    double ly1x = Lerp(RandVecs2D[hash0 | 0x1], RandVecs2D[hash1 | 0x1], xs);
    coord.x += Lerp(lx0x, lx1x, ys) * warpAmp;
    coord.y += Lerp(ly0x, ly1x, ys) * warpAmp;
  }
  
  private void SingleDomainWarpBasicGrid(int seed, double warpAmp, double frequency, double x, double y, double z, Vector3 coord) {
    double xf = x * frequency;
    double yf = y * frequency;
    double zf = z * frequency;
    int x0 = FastFloor(xf);
    int y0 = FastFloor(yf);
    int z0 = FastFloor(zf);
    double xs = InterpHermite(xf - x0);
    double ys = InterpHermite(yf - y0);
    double zs = InterpHermite(zf - z0);
    x0 *= 501125321;
    y0 *= 1136930381;
    z0 *= 1720413743;
    int x1 = x0 + 501125321;
    int y1 = y0 + 1136930381;
    int z1 = z0 + 1720413743;
    int hash0 = Hash(seed, x0, y0, z0) & 0x3FC;
    int hash1 = Hash(seed, x1, y0, z0) & 0x3FC;
    double lx0x = Lerp(RandVecs3D[hash0], RandVecs3D[hash1], xs);
    double ly0x = Lerp(RandVecs3D[hash0 | 0x1], RandVecs3D[hash1 | 0x1], xs);
    double lz0x = Lerp(RandVecs3D[hash0 | 0x2], RandVecs3D[hash1 | 0x2], xs);
    hash0 = Hash(seed, x0, y1, z0) & 0x3FC;
    hash1 = Hash(seed, x1, y1, z0) & 0x3FC;
    double lx1x = Lerp(RandVecs3D[hash0], RandVecs3D[hash1], xs);
    double ly1x = Lerp(RandVecs3D[hash0 | 0x1], RandVecs3D[hash1 | 0x1], xs);
    double lz1x = Lerp(RandVecs3D[hash0 | 0x2], RandVecs3D[hash1 | 0x2], xs);
    double lx0y = Lerp(lx0x, lx1x, ys);
    double ly0y = Lerp(ly0x, ly1x, ys);
    double lz0y = Lerp(lz0x, lz1x, ys);
    hash0 = Hash(seed, x0, y0, z1) & 0x3FC;
    hash1 = Hash(seed, x1, y0, z1) & 0x3FC;
    lx0x = Lerp(RandVecs3D[hash0], RandVecs3D[hash1], xs);
    ly0x = Lerp(RandVecs3D[hash0 | 0x1], RandVecs3D[hash1 | 0x1], xs);
    lz0x = Lerp(RandVecs3D[hash0 | 0x2], RandVecs3D[hash1 | 0x2], xs);
    hash0 = Hash(seed, x0, y1, z1) & 0x3FC;
    hash1 = Hash(seed, x1, y1, z1) & 0x3FC;
    lx1x = Lerp(RandVecs3D[hash0], RandVecs3D[hash1], xs);
    ly1x = Lerp(RandVecs3D[hash0 | 0x1], RandVecs3D[hash1 | 0x1], xs);
    lz1x = Lerp(RandVecs3D[hash0 | 0x2], RandVecs3D[hash1 | 0x2], xs);
    coord.x += Lerp(lx0y, Lerp(lx0x, lx1x, ys), zs) * warpAmp;
    coord.y += Lerp(ly0y, Lerp(ly0x, ly1x, ys), zs) * warpAmp;
    coord.z += Lerp(lz0y, Lerp(lz0x, lz1x, ys), zs) * warpAmp;
  }
  
  private void SingleDomainWarpSimplexGradient(int seed, double warpAmp, double frequency, double x, double y, Vector2 coord, boolean outGradOnly) {
    double SQRT3 = 1.7320507764816284D;
    double G2 = 0.21132487058639526D;
    x *= frequency;
    y *= frequency;
    int i = FastFloor(x);
    int j = FastFloor(y);
    double xi = x - i;
    double yi = y - j;
    double t = (xi + yi) * 0.21132487058639526D;
    double x0 = xi - t;
    double y0 = yi - t;
    i *= 501125321;
    j *= 1136930381;
    double vy = 0.0D, vx = vy;
    double a = 0.5D - x0 * x0 - y0 * y0;
    if (a > 0.0D) {
      double xo, yo, aaaa = a * a * a * a;
      if (outGradOnly) {
        int hash = Hash(seed, i, j) & 0x1FE;
        xo = RandVecs2D[hash];
        yo = RandVecs2D[hash | 0x1];
      } else {
        int hash = Hash(seed, i, j);
        int index1 = hash & 0xFE;
        int index2 = hash >> 7 & 0x1FE;
        double xg = Gradients2D[index1];
        double yg = Gradients2D[index1 | 0x1];
        double value = x0 * xg + y0 * yg;
        double xgo = RandVecs2D[index2];
        double ygo = RandVecs2D[index2 | 0x1];
        xo = value * xgo;
        yo = value * ygo;
      } 
      vx += aaaa * xo;
      vy += aaaa * yo;
    } 
    double c = 3.1547003477905378D * t + -0.6666666427356915D + a;
    if (c > 0.0D) {
      double xo, yo, x2 = x0 + -0.5773502588272095D;
      double y2 = y0 + -0.5773502588272095D;
      double cccc = c * c * c * c;
      if (outGradOnly) {
        int hash = Hash(seed, i + 501125321, j + 1136930381) & 0x1FE;
        xo = RandVecs2D[hash];
        yo = RandVecs2D[hash | 0x1];
      } else {
        int hash = Hash(seed, i + 501125321, j + 1136930381);
        int index1 = hash & 0xFE;
        int index2 = hash >> 7 & 0x1FE;
        double xg = Gradients2D[index1];
        double yg = Gradients2D[index1 | 0x1];
        double value = x2 * xg + y2 * yg;
        double xgo = RandVecs2D[index2];
        double ygo = RandVecs2D[index2 | 0x1];
        xo = value * xgo;
        yo = value * ygo;
      } 
      vx += cccc * xo;
      vy += cccc * yo;
    } 
    if (y0 > x0) {
      double x1 = x0 + 0.21132487058639526D;
      double y1 = y0 + -0.7886751294136047D;
      double b = 0.5D - x1 * x1 - y1 * y1;
      if (b > 0.0D) {
        double xo, yo, bbbb = b * b * b * b;
        if (outGradOnly) {
          int hash = Hash(seed, i, j + 1136930381) & 0x1FE;
          xo = RandVecs2D[hash];
          yo = RandVecs2D[hash | 0x1];
        } else {
          int hash = Hash(seed, i, j + 1136930381);
          int index1 = hash & 0xFE;
          int index2 = hash >> 7 & 0x1FE;
          double xg = Gradients2D[index1];
          double yg = Gradients2D[index1 | 0x1];
          double value = x1 * xg + y1 * yg;
          double xgo = RandVecs2D[index2];
          double ygo = RandVecs2D[index2 | 0x1];
          xo = value * xgo;
          yo = value * ygo;
        } 
        vx += bbbb * xo;
        vy += bbbb * yo;
      } 
    } else {
      double x1 = x0 + -0.7886751294136047D;
      double y1 = y0 + 0.21132487058639526D;
      double b = 0.5D - x1 * x1 - y1 * y1;
      if (b > 0.0D) {
        double xo, yo, bbbb = b * b * b * b;
        if (outGradOnly) {
          int hash = Hash(seed, i + 501125321, j) & 0x1FE;
          xo = RandVecs2D[hash];
          yo = RandVecs2D[hash | 0x1];
        } else {
          int hash = Hash(seed, i + 501125321, j);
          int index1 = hash & 0xFE;
          int index2 = hash >> 7 & 0x1FE;
          double xg = Gradients2D[index1];
          double yg = Gradients2D[index1 | 0x1];
          double value = x1 * xg + y1 * yg;
          double xgo = RandVecs2D[index2];
          double ygo = RandVecs2D[index2 | 0x1];
          xo = value * xgo;
          yo = value * ygo;
        } 
        vx += bbbb * xo;
        vy += bbbb * yo;
      } 
    } 
    coord.x += vx * warpAmp;
    coord.y += vy * warpAmp;
  }
  
  private void SingleDomainWarpOpenSimplex2Gradient(int seed, double warpAmp, double frequency, double x, double y, double z, Vector3 coord, boolean outGradOnly) {
    x *= frequency;
    y *= frequency;
    z *= frequency;
    int i = FastRound(x);
    int j = FastRound(y);
    int k = FastRound(z);
    double x0 = x - i;
    double y0 = y - j;
    double z0 = z - k;
    int xNSign = (int)(-x0 - 1.0D) | 0x1;
    int yNSign = (int)(-y0 - 1.0D) | 0x1;
    int zNSign = (int)(-z0 - 1.0D) | 0x1;
    double ax0 = xNSign * -x0;
    double ay0 = yNSign * -y0;
    double az0 = zNSign * -z0;
    i *= 501125321;
    j *= 1136930381;
    k *= 1720413743;
    double vz = 0.0D, vy = vz, vx = vy;
    double a = 0.6D - x0 * x0 - y0 * y0 + z0 * z0;
    for (int l = 0;; l++) {
      if (a > 0.0D) {
        double xo, yo, zo, aaaa = a * a * a * a;
        if (outGradOnly) {
          int hash = Hash(seed, i, j, k) & 0x3FC;
          xo = RandVecs3D[hash];
          yo = RandVecs3D[hash | 0x1];
          zo = RandVecs3D[hash | 0x2];
        } else {
          int hash = Hash(seed, i, j, k);
          int index1 = hash & 0xFC;
          int index2 = hash >> 6 & 0x3FC;
          double xg = Gradients3D[index1];
          double yg = Gradients3D[index1 | 0x1];
          double zg = Gradients3D[index1 | 0x2];
          double value = x0 * xg + y0 * yg + z0 * zg;
          double xgo = RandVecs3D[index2];
          double ygo = RandVecs3D[index2 | 0x1];
          double zgo = RandVecs3D[index2 | 0x2];
          xo = value * xgo;
          yo = value * ygo;
          zo = value * zgo;
        } 
        vx += aaaa * xo;
        vy += aaaa * yo;
        vz += aaaa * zo;
      } 
      double b = a;
      int i1 = i;
      int j1 = j;
      int k1 = k;
      double x1 = x0;
      double y1 = y0;
      double z1 = z0;
      if (ax0 >= ay0 && ax0 >= az0) {
        x1 += xNSign;
        b = b + ax0 + ax0;
        i1 -= xNSign * 501125321;
      } else if (ay0 > ax0 && ay0 >= az0) {
        y1 += yNSign;
        b = b + ay0 + ay0;
        j1 -= yNSign * 1136930381;
      } else {
        z1 += zNSign;
        b = b + az0 + az0;
        k1 -= zNSign * 1720413743;
      } 
      if (b > 1.0D) {
        double xo, yo, zo;
        b--;
        double bbbb = b * b * b * b;
        if (outGradOnly) {
          int hash = Hash(seed, i1, j1, k1) & 0x3FC;
          xo = RandVecs3D[hash];
          yo = RandVecs3D[hash | 0x1];
          zo = RandVecs3D[hash | 0x2];
        } else {
          int hash = Hash(seed, i1, j1, k1);
          int index1 = hash & 0xFC;
          int index2 = hash >> 6 & 0x3FC;
          double xg = Gradients3D[index1];
          double yg = Gradients3D[index1 | 0x1];
          double zg = Gradients3D[index1 | 0x2];
          double value = x1 * xg + y1 * yg + z1 * zg;
          double xgo = RandVecs3D[index2];
          double ygo = RandVecs3D[index2 | 0x1];
          double zgo = RandVecs3D[index2 | 0x2];
          xo = value * xgo;
          yo = value * ygo;
          zo = value * zgo;
        } 
        vx += bbbb * xo;
        vy += bbbb * yo;
        vz += bbbb * zo;
      } 
      if (l == 1)
        break; 
      ax0 = 0.5D - ax0;
      ay0 = 0.5D - ay0;
      az0 = 0.5D - az0;
      x0 = xNSign * ax0;
      y0 = yNSign * ay0;
      z0 = zNSign * az0;
      a += 0.75D - ax0 - ay0 + az0;
      i += xNSign >> 1 & 0x1DDE90C9;
      j += yNSign >> 1 & 0x43C42E4D;
      k += zNSign >> 1 & 0x668B6E2F;
      xNSign = -xNSign;
      yNSign = -yNSign;
      zNSign = -zNSign;
      seed += 1293373;
    } 
    coord.x += vx * warpAmp;
    coord.y += vy * warpAmp;
    coord.z += vz * warpAmp;
  }
  
  public static class Vector2 {
    public double x;
    
    public double y;
    
    public Vector2(double x, double y) {
      this.x = x;
      this.y = y;
    }
  }
  
  public static class Vector3 {
    public double x;
    
    public double y;
    
    public double z;
    
    public Vector3(double x, double y, double z) {
      this.x = x;
      this.y = y;
      this.z = z;
    }
  }
}


/* Location:              C:\Users\mrluu\Downloads\New folder (18)\pxnCommonPluginMC-4.0.34-SNAPSHOT.jar!\com\poixso\\utils\FastNoiseLiteD.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */